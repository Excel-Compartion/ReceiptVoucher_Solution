@page "/MinReports"
@rendermode InteractiveAuto
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Identity
@using ReceiptVoucher.Client.Pages.Receipt_Crud
@using System.Security.Claims
@using ReceiptVoucher.Core.Identity
@using ReceiptVoucher.Core.Models.ResponseModels
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager NavigationManager


<PageTitle>Makarim</PageTitle>

<style>


    :root {
        --color-custom: #3090C7;
    }

    .date-picker-color {
        background-color: #DBE9FA;
    }

</style>
<br />

<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">

    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.Assessment" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        التقارير




    </span>

</p>

<div class="containerContent" style="border: 1px solid gainsboro;border-radius:3px;padding:1%">



    <MudRadioGroup @bind-Value="RadioDateType">
        <MudRadio class="Day" Value="Day" Color="Color.Info" Size="Size.Small">تقرير يومي</MudRadio>
        <MudRadio class="Month" Value="Month" Color="Color.Warning" Size="Size.Small">تقرير عام</MudRadio>
    </MudRadioGroup>






    <MudGrid>
        <MudItem xs="12" sm="6">

            <!--Project Select-->
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الرئيسية" MultiSelection="true" @bind-SelectedValues="SelectProject" ValueChanged="UnCheckedChange">

                @if (Projects != null)
                {
                    @foreach (var project in Projects)
                    {
                        <MudSelectItem T="string" Value="@project.Name">@project.Name</MudSelectItem>
                    }
                }

            </MudSelect>
        </MudItem>


        @{
            if (SelectProject.Count() == 0 && SelectSubProject.Count() != 0)
            {
                UnCheckedChange();
            }
        }

        <MudItem xs="12" sm="6">

            <!--SubProject Select-->
            <MudSelect T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الفرعية" MultiSelection="true" @bind-SelectedValues="SelectSubProject">

                @if (SubProjects != null)
                {
                    if (isUnChecked)
                    {
                        // تهيئة القائمة المتعددة التي تم اختيارها
                        SelectSubProject = SelectSubProjectList;
                        isUnChecked = false;
                        StateHasChanged(); // إعادة تقديم العنصر


                    }

                    @foreach (var subProjects in SubProjects)
                    {
                        if (SelectProject.Count() != 0)
                        {
                            if (SelectProject.Contains(subProjects.Project.Name))
                            {
                                <MudSelectItem T="string" Value="@subProjects.Name">@subProjects.Name</MudSelectItem>
                            }
                        }

                    }
                }

            </MudSelect>

        </MudItem>
    </MudGrid>

     <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="الجهات المانحة" MultiSelection="true" @bind-SelectedValues="SelectGrantDestinations" >

                <MudSelectItem T="string" Value="@GrantDest.Individual.GetDisplayName()">@GrantDest.Individual.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Association.GetDisplayName()">@GrantDest.Association.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Company.GetDisplayName()">@GrantDest.Company.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Foundation.GetDisplayName()">@GrantDest.Foundation.GetDisplayName()</MudSelectItem>

            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="انواع الدفع" MultiSelection="true" @bind-SelectedValues="SelectPaymentTypes" >

               @*  <MudSelectItem T="string" Value="@PaymentTypes.Cash.GetDisplayName()">@PaymentTypes.Cash.GetDisplayName()</MudSelectItem> *@
                <MudSelectItem T="string" Value="@PaymentTypes.Check.GetDisplayName()">@PaymentTypes.Check.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Bank.GetDisplayName()">@PaymentTypes.Bank.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Account.GetDisplayName()">@PaymentTypes.Account.GetDisplayName()</MudSelectItem> 

            </MudSelect>
        </MudItem>


    </MudGrid>




    @{
        if (UserBranchId == null)
        {
            <MudSelect SelectAll="true" SelectAllText="اختيار الكل" Style="width:100%" T="string" Label="المكاتب" MultiSelection="true" @bind-SelectedValues="SelectBranchId">


                @foreach (var branch in Branches)
                {
                    <MudSelectItem T="string" Value="@branch.Name">@branch.Name</MudSelectItem>
                }


            </MudSelect>
        }
    }

    <br />

    @if (RadioDateType == Day)
    {
        <MudDatePicker Class="date-picker-color" Color="Color.Info" @bind-Date="selectedDate" Label="تاريخ السند" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />


    }
    else
    {

        <MudGrid>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth1" Label="من التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth2" Label="الى التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
        </MudGrid>





    }
    <br />
    <span style="font-size:15px;font-weight:500;color:grey"> اجمالي عدد السندات : @data.Count()</span>

    &nbsp; &nbsp;&nbsp; &nbsp;


    <span style="font-size:15px;font-weight:500;color:grey"> اجمالي مبالغ التبرعات : @data.Select(x => x.TotalAmount).Sum() ر. س</span>

</div>
<br />






<br />
<MudTable ServerData="@(new Func<TableState, Task<TableData<Receipt>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton Class="custom-btn" OnClick="SendFilterData" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.EventNote" Title="add" />
            <span>عرض التقرير</span>
        </MudButton>

        &nbsp;
        &nbsp;

        
        <MudButton Class="custom-btn" OnClick="ExploreAsExcel" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.SimCardDownload" Title="add" />
            <span>تصدير التقرير</span>
        </MudButton>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">رقم السند</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="Receipt">اسم المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="mobile_field" T="Receipt">رقم الجوال</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="Receipt">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="Receipt">اجمالي المبلغ</MudTableSortLabel></MudTh>

        @{
            if (UserBranchId == null)
            {
                <MudTh><MudTableSortLabel SortLabel="Branch_field" T="Receipt">المكتب</MudTableSortLabel></MudTh>

            }
        }
        <MudTh><MudTableSortLabel SortLabel="SubProject_field" T="Receipt">المشروع الفرعي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Date_field" T="Receipt">التاريخ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PaymentType_field" T="Receipt">نوع الدفع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Receipt">الاجراءت</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Number</MudTd>
            <MudTd DataLabel="اسم المودع">@context.ReceivedFrom</MudTd>
            <MudTd DataLabel="رقم الجوال">@context.Mobile</MudTd>
            <MudTd DataLabel="الجهة المانحة">@context.GrantDestinations.GetDisplayName()</MudTd>
            <MudTd DataLabel="اجمالي المبلغ">@context.TotalAmount</MudTd>

            @if (UserBranchId == null)
        {
            <MudTd DataLabel="المكتب">@context.Branch.Name</MudTd>
        }

        <MudTd DataLabel="المشروع الفرعي">@context.SubProject.Name</MudTd>
            <MudTd DataLabel="التاريخ">@context.Date</MudTd>
            <MudTd DataLabel="نوع الدفع">@context.PaymentType.GetDisplayName()</MudTd>
            <MudTd DataLabel="الاجراءت">
                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Warning" Size="Size.Small" Variant="Variant.Outlined" @onclick="@(() => OpenDetailsDialog(context))" StartIcon="@Icons.Material.Outlined.AddRoad">تفاصيل</MudButton>
                    <MudButton Color="Color.Success" Size="Size.Small" Variant="Variant.Outlined" @onclick="()=>PrintReceipt(context.Code)" StartIcon="@Icons.Material.Outlined.Print">طباعة</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
        
            <MudText class="NotFound">@ResponseMessage</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText class="LodingNow">جاري التحميل...</MudText>
        </LoadingContent>
        <PagerContent>
        <MudTablePager RowsPerPageString="رقم الصفحة" />
        </PagerContent>
    </MudTable>






@code {
    private MudTable<Receipt>? table;
    private string? searchString;
    private DateTime? selectedDate = DateTime.Now;
    private DateTime? selectedMonth1 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime? selectedMonth2 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));

    private string RadioDateType = null!;
    private string Day = "Day";
    private string Month = "Month";

    public string ResponseMessage = "لم يتم العثور على سجلات";



    public List<Branch> Branches { get; set; } = new List<Branch>();

    // SubProject Select
    private List<SubProject> SubProjects { get; set; } = new List<SubProject>();

    private IEnumerable<string> SelectSubProject { get; set; } = new List<string>();


    private List<Project> Projects { get; set; } = new List<Project>();

    private IEnumerable<string> SelectProject { get; set; } = new List<string>();

    private IEnumerable<string> SelectBranchId { get; set; } = new List<string>();

    private IEnumerable<string> SelectPaymentTypes { get; set; } = new List<string>();

    private IEnumerable<string> SelectGrantDestinations { get; set; } = new List<string>();

    private bool subProjectClose = false;

    private int SelectProjectCount;

    private bool isUnChecked = false;

    private List<string> SelectSubProjectList = new List<string>();

    public int? UserBranchId { get; set; } 

    void UnCheckedChange()
    {
        if (SelectProjectCount > SelectProject.Count())
        {
            isUnChecked = true;

            SelectProjectCount = SelectProject.Count();

            if (SelectSubProject.Count() != 0 && SelectProject.Count() != 0)
            {
                foreach (var selectSubProject in SelectSubProject)
                {
                    var SubProject = SubProjects.Where(x => x.Name == selectSubProject).FirstOrDefault();

                    if (SelectProject.Contains(SubProject.Project.Name))
                    {
                        SelectSubProjectList.Add(SubProject.Name);
                    }

                }


                SelectSubProject = SelectSubProjectList;

            }
            else
            {
                SelectSubProjectList = new List<string>();
            }

        }

        else
        {
            SelectProjectCount = SelectProject.Count();
        }

    }



    void PrintReceipt(string code)
    {
        var url = $"RP/{code}";
        JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }





    public UserViewModel ApplicationUser { get; set; } = new();

    private async Task<UserViewModel?> GetCurrentUserDetailsAsync()
    {
        try
        {
            var UserResponse = await Http.GetFromJsonAsync<UserViewModel>("api/users/GetUserDetails");
            return UserResponse;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex.Message);
            return null; // Or provide a default value
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {

            //-------------------------

            var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState?.User;

            if (user != null)
            {
                var userId = user.FindFirstValue("uid");


                ApplicationUser = await GetCurrentUserDetailsAsync();
            }

            UserBranchId = ApplicationUser.BranchId;

            //-------------------------
            RadioDateType = Day;
        }
        catch (Exception ex )
        {
            Console.WriteLine(ex.Message);
        }







        try
        {
            var response = await Http.GetFromJsonAsync<List<Branch>>("api/Branches/GetAllAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProject>>("api/SubProjects/Get");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<Project>>("api/Projects/GetAllAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }


        await SendFilterData();


    }




    private void UpdateTable()
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
    }

    private bool CheckProjectSelect(int ProjectId)
    {
        bool _bool = false;
        var project = Projects.Where(x => x.Id == ProjectId).FirstOrDefault();

        if (project != null)
        {
            if (SelectProject.Contains(project.Name))
            {
                _bool = true;
            }
        }


        return _bool;
    }



    private FilterData filterData = new FilterData();

    private List<Receipt> data = new List<Receipt>();

    private async Task SendFilterData()
    {




        // جمع بيانات الفلترة
        filterData.RadioDateType = RadioDateType;



        filterData.SelectedDate = DateOnly.FromDateTime(selectedDate.Value);
        filterData.SelectedMonth1 = DateOnly.FromDateTime(selectedMonth1.Value);
        filterData.SelectedMonth2 = DateOnly.FromDateTime(selectedMonth2.Value);
        filterData.SelectProject = SelectProject.ToList();
        filterData.SelectSubProject = SelectSubProject.ToList();
        filterData.SelectBranchId = SelectBranchId.ToList();
        filterData.SelectBranchId = SelectBranchId.ToList();
        filterData.SelectGrantDestinations = SelectGrantDestinations.ToList();
        filterData.SelectPaymentTypes = SelectPaymentTypes.ToList();
        filterData.UserBranchId = UserBranchId;


        bool IsFilter = filterData.SelectGrantDestinations.Count > 0
       || filterData.SelectPaymentTypes.Count > 0
       || filterData.SelectProject.Count > 0
       || filterData.SelectSubProject.Count > 0
       || filterData.SelectBranchId.Count > 0;




        bool IsFilterItemsAllSelected = filterData.SelectGrantDestinations.Count > 0
      && filterData.SelectPaymentTypes.Count > 0
      && filterData.SelectProject.Count > 0
      && filterData.SelectSubProject.Count > 0
      && (filterData.SelectBranchId.Count > 0 || UserBranchId != null);



        if (((IsFilter == false && IsFilterItemsAllSelected == false) || IsFilterItemsAllSelected) || (IsFilter == false && UserBranchId != null))
        {
            // إرسال البيانات إلى واجهة برمجة التطبيقات
            var response = await Http.PostAsJsonAsync("api/Receipts/GetFilteredData", filterData);

            // التحقق من الاستجابة
            if (response.IsSuccessStatusCode)
            {

                try
                {
                    // تحويل البيانات المرتجعة إلى قائمة الإيصالات
                    var receipts = await response.Content.ReadFromJsonAsync<List<Receipt>>();


                    if (receipts != null) { data = receipts.OrderByDescending(x => x.Number).ToList(); }

                    if (table != null) { await table.ReloadServerData(); }

                }
                catch { }


            }
        }


        else
        {
            _Snackbar.Add($"قم بتحديد عناصر الفلترة", Severity.Error);
        }

    }


    async void ExploreAsExcel()
    {
        if (data != null && data.Count() != 0)
        {
            var response = await Http.PostAsJsonAsync("api/Receipts/GetReportWithFilteredData", filterData);
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileContent = Convert.ToBase64String(fileBytes);
                await JSRuntime.InvokeVoidAsync("downloadFile", fileContent, "ملف التقرير.xls");
            }
            else
            {
                _Snackbar.Add($"حدث خطاء", Severity.Error);
            }
        }
        else
        {
            _Snackbar.Add($"لاتوجد بيانات", Severity.Error);
        }
    }


    private async Task<TableData<Receipt>> ServerReload(TableState state)
    {

        data = data.Where(receipt =>
      {
      if (string.IsNullOrWhiteSpace(searchString))
          return true;
      if (receipt.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
          return true;
      if (receipt.GrantDestinations.GetDisplayName().Contains(searchString, StringComparison.OrdinalIgnoreCase))
              return true;
      if ($"{receipt.Number}".Contains(searchString))
          return true;
      if ($"{receipt.Mobile}".Contains(searchString))
          return true;
      if (receipt.Date.ToString().Equals(searchString)) // إضافة البحث عن التاريخ
          return true;
      return false;
      }).ToList();


        int totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "id_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Id).ToList() : data.OrderByDescending(r => r.Id).ToList();
                break;
            case "receivedFrom_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.ReceivedFrom).ToList() : data.OrderByDescending(r => r.ReceivedFrom).ToList();
                break;

            case "Date_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Date).ToList() : data.OrderByDescending(r => r.Date).ToList();
                break;

            case "grantDestinations_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.GrantDestinations.GetDisplayName()).ToList() : data.OrderByDescending(r => r.GrantDestinations.GetDisplayName()).ToList();
                break;
            case "totalAmount_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.TotalAmount).ToList() : data.OrderByDescending(r => r.TotalAmount).ToList();
                break;

            case "Branch_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Branch.Name).ToList() : data.OrderByDescending(r => r.Branch.Name).ToList();
                break;

            case "SubProject_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.SubProject.Name).ToList() : data.OrderByDescending(r => r.SubProject.Name).ToList();
                break;



            case "PaymentType_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.PaymentType.GetDisplayName()).ToList() : data.OrderByDescending(r => r.PaymentType.GetDisplayName()).ToList();
                break;

            case "mobile_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.PaymentType.GetDisplayName()).ToList() : data.OrderByDescending(r => r.Mobile).ToList();
                break;

        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Receipt>() { TotalItems = totalItems, Items = pagedData };
    }

   
    private void OnSearch(string text)
    {
        searchString = text;
        if (table != null) { table.ReloadServerData(); }

    }

    private void OpenDetailsDialog(Receipt receipt)
    {
        var parameters = new DialogParameters();


        ReceiptViewModel receiptViewModel = new ReceiptViewModel();

        receiptViewModel.Id = receipt.Id;
        receiptViewModel.ReceivedFrom = receipt.ReceivedFrom;
        receiptViewModel.ReceivedBy = receipt.ReceivedBy;
        receiptViewModel.TotalAmount = receipt.TotalAmount;
        receiptViewModel.BranchId = receipt.BranchId;
        receiptViewModel.SubProjectId = receipt.SubProjectId;
        receiptViewModel.ForPurpose = receipt.ForPurpose;
        receiptViewModel.Date = receipt.Date;
        receiptViewModel.PaymentType = receipt.PaymentType;
        receiptViewModel.CheckNumber = receipt.CheckNumber;
        receiptViewModel.ProjectId = receipt.ProjectId;
        receiptViewModel.GrantDestinations = receipt.GrantDestinations;
        receiptViewModel.Gender = receipt.Gender;
        receiptViewModel.Age = receipt.Age;
        receiptViewModel.Mobile = receipt.Mobile;




        // التحقق من القيمة قبل التحويل
        DateTime? dateTime = receipt.CheckDate.HasValue ? receipt.CheckDate.Value.ToDateTime(TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)) : (DateTime?)null;

        // تعيين القيمة في ViewModel
        receiptViewModel.CheckDate = dateTime;



        receiptViewModel.AccountNumber = receipt.AccountNumber;
        receiptViewModel.Bank = receipt.Bank;



        parameters.Add("OriginalReceiptViewModel", receiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("Projects", Projects);

        var options = new DialogOptions() { CloseButton = true };


        parameters.Add("BtnName", ButtonTypes.Details);
        _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);




    }
}