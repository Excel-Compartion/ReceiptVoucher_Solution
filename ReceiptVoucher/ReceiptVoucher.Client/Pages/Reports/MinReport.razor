        @page "/MinReports"
@rendermode InteractiveAuto

@using System.Net.Http.Json
@using ReceiptVoucher.Client.Pages.Receipt_Crud
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager


<style>


    :root {
        --color-custom: #3090C7;
    }



    .date-picker-color {
        background-color: #DBE9FA;
    }

</style>
<br />

<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <span style="background-color:#DBE9FA ;font-size:x-large;color:#52595D">

        <MudIcon Icon="@Icons.Material.Filled.Assessment" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        التقارير

        <b style="color:dodgerblue;font-size:xx-large">|</b>


    </span>

</p>

<div style="border: 1px solid gainsboro;border-radius:3px;padding:1%">



    <MudRadioGroup @bind-Value="RadioDateType">
        <MudRadio Value="Day" Color="Color.Info" Size="Size.Small">تقرير يومي</MudRadio>
        <MudRadio Value="Month" Color="Color.Warning" Size="Size.Small">تقرير عام</MudRadio>
    </MudRadioGroup>


   

    

    <MudGrid>
        <MudItem xs="6">

            <!--Project Select-->
            <MudSelect  Style="width:100%" T="string" SelectAll="true" Label="المشاريع الرئيسية" MultiSelection="true" @bind-SelectedValues="SelectProject" ValueChanged="UnCheckedChange">

                @if (Projects != null)
                {
                    @foreach (var project in Projects)
                    {
                        <MudSelectItem T="string" Value="@project.Name">@project.Name</MudSelectItem>
                    }
                }

            </MudSelect>
        </MudItem>


        @{
            if(SelectProject.Count()==0 && SelectSubProject.Count() != 0)
            {
                UnCheckedChange();
            }
        }

        <MudItem xs="6">

            <!--SubProject Select-->
            <MudSelect T="string" SelectAll="true" Label="المشاريع الفرعية" MultiSelection="true" @bind-SelectedValues="SelectSubProject">

                @if (SubProjects != null)
                {
                    if (isUnChecked)
                    {
                        // تهيئة القائمة المتعددة التي تم اختيارها
                        SelectSubProject = SelectSubProjectList;
                        isUnChecked = false;
                        StateHasChanged(); // إعادة تقديم العنصر

                      
                    }

                    @foreach (var subProjects in SubProjects)
                    {
                        if (SelectProject.Count() != 0)
                        {
                            if (SelectProject.Contains(subProjects.Project.Name))
                            {
                                <MudSelectItem T="string" Value="@subProjects.Name">@subProjects.Name</MudSelectItem>
                            }
                        }

                    }
                }

            </MudSelect>

        </MudItem>
    </MudGrid>



   


    <!--Center Select-->
    <MudSelect SelectAll="true" Style="width:100%" T="string" Label="المراكز" MultiSelection="true" @bind-SelectedValues="SelectBranchId">

        @if (Branches != null)
        {
            @foreach (var branch in Branches)
            {
                <MudSelectItem T="string" Value="@branch.Name">@branch.Name</MudSelectItem>
            }
        }

    </MudSelect>

    <br />

    @if (RadioDateType == Day)
    {
        <MudDatePicker Class="date-picker-color" Color="Color.Info" @bind-Date="selectedDate" Label="تاريخ السند" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />


    }
    else
    {

        <MudGrid>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth1" Label="من التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog"  />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth2" Label="الى التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog"  />
            </MudItem>
        </MudGrid>


      


    }
    <br />
    <MudFab Size="Size.Medium" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.EventNote" OnClick="Submit" Style="background-color: var(--color-custom);  color: white;" Label="عرض التقرير" />



</div>
<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<Receipt>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">رقم السند</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="Receipt">اسم المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="Receipt">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="Receipt">اجمالي المبلغ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Branch_field" T="Receipt">الفرع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="SubProject_field" T="Receipt">المشروع الفرعي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Date_field" T="Receipt">التاريخ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PaymentType_field" T="Receipt">نوع الدفع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Receipt">الاجراءت</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="اسم المودع">@context.ReceivedFrom</MudTd>
            <MudTd DataLabel="الجهة المانحة">@context.GrantDestinations.GetDisplayName()</MudTd>
            <MudTd DataLabel="اجمالي المبلغ">@context.TotalAmount</MudTd>
            <MudTd DataLabel="الفرع">@context.Branch.Name</MudTd>
            <MudTd DataLabel="المشروع الفرعي">@context.SubProject.Name</MudTd>
            <MudTd DataLabel="التاريخ">@context.Date</MudTd>
            <MudTd DataLabel="نوع الدفع">@context.PaymentType.GetDisplayName()</MudTd>
            <MudTd DataLabel="الاجراءت">
                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Warning" Variant="Variant.Outlined" @onclick="@(() => OpenDetailsDialog(context))" StartIcon="@Icons.Material.Outlined.AddRoad">تفاصيل</MudButton>
                    <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="()=>PrintReceipt(context.Id)" StartIcon="@Icons.Material.Outlined.Print">طباعة</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>






    @code {
    private MudTable<Receipt> table;
    private string searchString = null;
    private DateTime? selectedDate = DateTime.Now;
    private DateTime? selectedMonth1 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime? selectedMonth2 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));

    private string RadioDateType;
    private string Day = "Day";
    private string Month = "Month";



    public List<Branch> Branches { get; set; }

    // SubProject Select
    private List<SubProject> SubProjects { get; set; } = new List<SubProject>();

    private IEnumerable<string> SelectSubProject { get; set; } = new List<string>();


    private List<Project> Projects { get; set; } = new List<Project>();

    private IEnumerable<string> SelectProject { get; set; } = new List<string>();

    private IEnumerable<string> SelectBranchId { get; set; } = new List<string>();

    private bool subProjectClose = false;

    private int SelectProjectCount;

    private bool isUnChecked = false;

    private List<string> SelectSubProjectList = new List<string>();



    void UnCheckedChange()
    {
        if (SelectProjectCount > SelectProject.Count())
        {
            isUnChecked = true;

            SelectProjectCount = SelectProject.Count();

            if (SelectSubProject.Count() != 0 && SelectProject.Count()!=0)
            {
                foreach (var selectSubProject in SelectSubProject)
                {
                    var SubProject = SubProjects.Where(x => x.Name == selectSubProject).FirstOrDefault();

                    if (SelectProject.Contains(SubProject.Project.Name))
                    {
                        SelectSubProjectList.Add(SubProject.Name);
                    }

                }


                SelectSubProject = SelectSubProjectList;

            }
            else
            {
                SelectSubProjectList = new List<string>();
            }

        }

        else
        {
            SelectProjectCount = SelectProject.Count();
        }

    }



    void PrintReceipt(int id)
    {
        var url = $"api/Receipts/GetReceiptRdcl/{id}";
        JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    protected override async Task OnInitializedAsync()
    {
        RadioDateType = Day;

        Branches = await Http.GetFromJsonAsync<List<Branch>>("api/Branches/GetAllAsync");

        SubProjects = await Http.GetFromJsonAsync<List<SubProject>>("api/SubProjects/Get");

        Projects = await Http.GetFromJsonAsync<List<Project>>("api/Projects/GetAllAsync");


    }




    private void UpdateTable()
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
    }

    private bool CheckProjectSelect(int ProjectId)
    {
        bool _bool = false;
        var project = Projects.Where(x => x.Id == ProjectId).FirstOrDefault();

        if (project != null)
        {
            if (SelectProject.Contains(project.Name))
            {
                _bool = true;
            }
        }


        return _bool;
    }



    private FilterData filterData = new FilterData();

    private List<Receipt> data = new List<Receipt>();

    private async Task Submit()
    {
        // جمع بيانات الفلترة
        filterData.RadioDateType = RadioDateType;



        filterData.SelectedDate = DateOnly.FromDateTime(selectedDate.Value);
        filterData.SelectedMonth1 = DateOnly.FromDateTime(selectedMonth1.Value);
        filterData.SelectedMonth2 = DateOnly.FromDateTime(selectedMonth2.Value);
        filterData.SelectProject = SelectProject.ToList();
        filterData.SelectSubProject = SelectSubProject.ToList();
        filterData.SelectBranchId = SelectBranchId.ToList();

        // إرسال البيانات إلى واجهة برمجة التطبيقات
        var response = await Http.PostAsJsonAsync("api/Receipts/GetFilteredData", filterData);

        // التحقق من الاستجابة
        if (response.IsSuccessStatusCode)
        {
            // تحويل البيانات المرتجعة إلى قائمة الإيصالات
            var receipts = await response.Content.ReadFromJsonAsync<List<Receipt>>();

            data = receipts;

            table.ReloadServerData();

        }
    }

    private async Task<TableData<Receipt>> ServerReload(TableState state)
    {
       

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            data = data.Where(r => r.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                   r.Id.ToString().Contains(searchString)).ToList();
        }


        int totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "id_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Id).ToList() : data.OrderByDescending(r => r.Id).ToList();
                break;
            case "receivedFrom_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.ReceivedFrom).ToList() : data.OrderByDescending(r => r.ReceivedFrom).ToList();
                break;

            case "Date_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Date).ToList() : data.OrderByDescending(r => r.Date).ToList();
                break;

            case "grantDestinations_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.GrantDestinations.GetDisplayName()).ToList() : data.OrderByDescending(r => r.GrantDestinations.GetDisplayName()).ToList();
                break;
            case "totalAmount_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.TotalAmount).ToList() : data.OrderByDescending(r => r.TotalAmount).ToList();
                break;

            case "Branch_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Branch.Name).ToList() : data.OrderByDescending(r => r.Branch.Name).ToList();
                break;

            case "SubProject_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.SubProject.Name).ToList() : data.OrderByDescending(r => r.SubProject.Name).ToList();
                break;



            case "PaymentType_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.PaymentType.GetDisplayName()).ToList() : data.OrderByDescending(r => r.PaymentType.GetDisplayName()).ToList();
                break;

        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<Receipt>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void OpenDetailsDialog(Receipt receipt)
    {
        var parameters = new DialogParameters();


        ReceiptViewModel receiptViewModel = new ReceiptViewModel();

        receiptViewModel.Id = receipt.Id;
        receiptViewModel.ReceivedFrom = receipt.ReceivedFrom;
        receiptViewModel.ReceivedBy = receipt.ReceivedBy;
        receiptViewModel.TotalAmount = receipt.TotalAmount;
        receiptViewModel.BranchId = receipt.BranchId;
        receiptViewModel.SubProjectId = receipt.SubProjectId;
        receiptViewModel.ForPurpose = receipt.ForPurpose;
        receiptViewModel.Date = receipt.Date;
        receiptViewModel.PaymentType = receipt.PaymentType;
        receiptViewModel.CheckNumber = receipt.CheckNumber;
        receiptViewModel.ProjectId = receipt.ProjectId;
        receiptViewModel.GrantDestinations = receipt.GrantDestinations;
        receiptViewModel.Gender = receipt.Gender;
        receiptViewModel.Age = receipt.Age;
        receiptViewModel.Mobile = receipt.Mobile;




        // التحقق من القيمة قبل التحويل
        DateTime? dateTime = receipt.CheckDate.HasValue ? receipt.CheckDate.Value.ToDateTime(TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)) : (DateTime?)null;

        // تعيين القيمة في ViewModel
        receiptViewModel.CheckDate = dateTime;



        receiptViewModel.AccountNumber = receipt.AccountNumber;
        receiptViewModel.Bank = receipt.Bank;



        parameters.Add("OriginalReceiptViewModel", receiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("Projects", Projects);

        var options = new DialogOptions() { CloseButton = true };


        parameters.Add("BtnName", ButtonTypes.Details);
        _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);




    }
}