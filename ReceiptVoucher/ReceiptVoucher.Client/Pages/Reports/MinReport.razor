@page "/MinReports"
@rendermode InteractiveAuto
@using System.Net.Http.Json
@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using ReceiptVoucher.Client.Pages.Receipt_Crud
@using System.Security.Claims
@using ReceiptVoucher.Core.Identity
@using ReceiptVoucher.Core.Models
@using ReceiptVoucher.Core.Models.ResponseModels
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IMapper _Mapper
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IAuthService _IAuthservice


<PageTitle>Makarim</PageTitle>

<style>


    :root {
        --color-custom: #3090C7;
    }

    .date-picker-color {
        background-color: #DBE9FA;
    }

</style>
<br />

<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">

    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.Assessment" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        التقارير




    </span>

</p>

<div class="containerContent" style="border: 1px solid gainsboro;border-radius:3px;padding:1%">



    <MudRadioGroup @bind-Value="RadioDateType">
        <MudRadio class="Day" Value="Day" Color="Color.Info" Size="Size.Small">تقرير يومي</MudRadio>
        <MudRadio class="Month" Value="Month" Color="Color.Warning" Size="Size.Small">تقرير عام</MudRadio>
    </MudRadioGroup>






    <MudGrid>
        <MudItem xs="12" sm="6">

            <!--Project Select-->
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الرئيسية" MultiSelection="true" @bind-SelectedValues="SelectProject" ValueChanged="UnCheckedChange">

                @if (Projects != null)
                {
                    @foreach (var project in Projects)
                    {
                        <MudSelectItem T="string" Value="@project.Name">@project.Name</MudSelectItem>
                    }
                }

            </MudSelect>
        </MudItem>


        @{
            if (SelectProject.Count() == 0 && SelectSubProject.Count() != 0)
            {
                UnCheckedChange();
            }
        }

        <MudItem xs="12" sm="6">

            <!--SubProject Select-->
            <MudSelect T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الفرعية" MultiSelection="true" @bind-SelectedValues="SelectSubProject">

                @if (SubProjects != null)
                {
                    if (isUnChecked)
                    {
                        // تهيئة القائمة المتعددة التي تم اختيارها
                        SelectSubProject = SelectSubProjectList;
                        isUnChecked = false;
                        StateHasChanged(); // إعادة تقديم العنصر


                    }

                    @foreach (var subProjects in SubProjects)
                    {
                        if (SelectProject.Count() != 0)
                        {
                            if (SelectProject.Contains(subProjects.ProjectName))
                            {
                                <MudSelectItem T="string" Value="@subProjects.Name">@subProjects.Name</MudSelectItem>
                            }
                        }

                    }
                }

            </MudSelect>

        </MudItem>
    </MudGrid>

     <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="الجهات المانحة" MultiSelection="true" @bind-SelectedValues="SelectGrantDestinations" >

                <MudSelectItem T="string" Value="@GrantDest.Individual.GetDisplayName()">@GrantDest.Individual.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Association.GetDisplayName()">@GrantDest.Association.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Company.GetDisplayName()">@GrantDest.Company.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Foundation.GetDisplayName()">@GrantDest.Foundation.GetDisplayName()</MudSelectItem>

            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="انواع الدفع" MultiSelection="true" @bind-SelectedValues="SelectPaymentTypes" >

               @*  <MudSelectItem T="string" Value="@PaymentTypes.Cash.GetDisplayName()">@PaymentTypes.Cash.GetDisplayName()</MudSelectItem> *@
                <MudSelectItem T="string" Value="@PaymentTypes.Check.GetDisplayName()">@PaymentTypes.Check.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Bank.GetDisplayName()">@PaymentTypes.Bank.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Account.GetDisplayName()">@PaymentTypes.Account.GetDisplayName()</MudSelectItem> 

            </MudSelect>
        </MudItem>


    </MudGrid>




    @{
        
            <MudSelect SelectAll="true" SelectAllText="اختيار الكل" Style="width:100%" T="string" Label="المكاتب" MultiSelection="true" @bind-SelectedValues="SelectBranchId">


                @foreach (var branch in Branches)
                {
                    <MudSelectItem T="string" Value="@branch.Name">@branch.Name</MudSelectItem>
                }


            </MudSelect>
        
    }

    <br />

    @if (RadioDateType == Day)
    {
        <MudDatePicker Class="date-picker-color" Color="Color.Info" @bind-Date="selectedDate" Label="تاريخ السند" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />


    }
    else
    {

        <MudGrid>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth1" Label="من التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth2" Label="الى التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
        </MudGrid>





    }
    <br />
    <span style="font-size:15px;font-weight:500;color:grey"> اجمالي عدد السندات : @data.Count()</span>

    &nbsp; &nbsp;&nbsp; &nbsp;


    <span style="font-size:15px;font-weight:500;color:grey"> اجمالي مبالغ التبرعات : @data.Select(x => x.TotalAmount+x.UpdateAmount).Sum() ر. س</span>

</div>
<br />






<br />
<MudTable ServerData="@(new Func<TableState, Task<TableData<GetReceiptDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton Class="custom-btn" OnClick="SendFilterData" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.EventNote" Title="add" />
            <span>عرض التقرير</span>
        </MudButton>

        &nbsp;
        &nbsp;

        
        <MudButton Class="custom-btn" OnClick="ExploreAsExcel" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.SimCardDownload" Title="add" />
            <span>تصدير التقرير</span>
        </MudButton>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="GetReceiptDto">رقم السند</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="GetReceiptDto">اسم المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="mobile_field" T="GetReceiptDto">رقم الجوال</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="GetReceiptDto">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="GetReceiptDto">اجمالي المبلغ</MudTableSortLabel></MudTh>

        @{
          
            
                <MudTh><MudTableSortLabel SortLabel="Branch_field" T="GetReceiptDto">المكتب</MudTableSortLabel></MudTh>

            
        }
        <MudTh><MudTableSortLabel SortLabel="SubProject_field" T="GetReceiptDto">المشروع الفرعي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Date_field" T="GetReceiptDto">التاريخ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PaymentType_field" T="GetReceiptDto">نوع الدفع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="GetReceiptDto">الاجراءت</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="رقم السند">
            @{
                string? BranchNumWithReceiptNum = context.ReceiptBranchNumWithBranchNum;
            }

            @BranchNumWithReceiptNum

        </MudTd>
            <MudTd DataLabel="اسم المودع">@context.ReceivedFrom</MudTd>
            <MudTd DataLabel="رقم الجوال">@context.Mobile</MudTd>
            <MudTd DataLabel="الجهة المانحة">@context.GrantDestinations.GetDisplayName()</MudTd>
            <MudTd DataLabel="اجمالي المبلغ">@context.TotalAmountFinal</MudTd>

            
        
            <MudTd DataLabel="المكتب">@context.BranchName</MudTd>
        

        <MudTd DataLabel="المشروع الفرعي">@context.SubProjectName</MudTd>
            <MudTd DataLabel="التاريخ">@context.Date</MudTd>
            <MudTd DataLabel="نوع الدفع">@context.PaymentType.GetDisplayName()</MudTd>
            <MudTd DataLabel="الاجراءت">
                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Warning" Size="Size.Small" Variant="Variant.Outlined" @onclick="@(() => OpenDetailsDialog(context))" StartIcon="@Icons.Material.Outlined.AddRoad">تفاصيل</MudButton>
                    <MudButton Color="Color.Success" Size="Size.Small" Variant="Variant.Outlined" @onclick="()=>PrintGetReceiptDto(context.Code)" StartIcon="@Icons.Material.Outlined.Print">طباعة</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
        
            <MudText class="NotFound">@ResponseMessage</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText class="LodingNow">جاري التحميل...</MudText>
        </LoadingContent>
        <PagerContent>
        <MudTablePager RowsPerPageString="رقم الصفحة" />
        </PagerContent>
    </MudTable>






@code {
    private MudTable<GetReceiptDto>? table;
    private string? searchString;
    private DateTime? selectedDate = DateTime.Now;
    private DateTime? selectedMonth1 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime? selectedMonth2 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));

    private string RadioDateType = null!;
    private string Day = "Day";
    private string Month = "Month";

    public string ResponseMessage = "لم يتم العثور على سجلات";



    public List<BranchVMForDrowpDownSelect> Branches { get; set; } = new List<BranchVMForDrowpDownSelect>();

    // SubProject Select
    private List<SubProjectVMForDrowpDownSelect> SubProjects { get; set; } = new List<SubProjectVMForDrowpDownSelect>();

    private IEnumerable<string> SelectSubProject { get; set; } = new List<string>();


    private List<ProjectVMForDrowpDownSelect> Projects { get; set; } = new List<ProjectVMForDrowpDownSelect>();

    private IEnumerable<string> SelectProject { get; set; } = new List<string>();

    private IEnumerable<string> SelectBranchId { get; set; } = new List<string>();

    private IEnumerable<string> SelectPaymentTypes { get; set; } = new List<string>();

    private IEnumerable<string> SelectGrantDestinations { get; set; } = new List<string>();

    private bool subProjectClose = false;

    private int SelectProjectCount;

    private bool isUnChecked = false;

    public int? UserBranchId { get; set; }

    private List<string> SelectSubProjectList = new List<string>();

    ReceiptWithFilter_VM receiptWithFilter_VM = new ReceiptWithFilter_VM();

    public UserViewModel currentUser { get; set; } = new();

    void UnCheckedChange()
    {
        if (SelectProjectCount > SelectProject.Count())
        {
            isUnChecked = true;

            SelectProjectCount = SelectProject.Count();

            if (SelectSubProject.Count() != 0 && SelectProject.Count() != 0)
            {
                foreach (var selectSubProject in SelectSubProject)
                {
                    var SubProject = SubProjects.Where(x => x.Name == selectSubProject).FirstOrDefault();

                    if (SelectProject.Contains(SubProject.ProjectName))
                    {
                        SelectSubProjectList.Add(SubProject.Name);
                    }

                }


                SelectSubProject = SelectSubProjectList;

            }
            else
            {
                SelectSubProjectList = new List<string>();
            }

        }

        else
        {
            SelectProjectCount = SelectProject.Count();
        }

    }



    void PrintGetReceiptDto(string code)
    {
        var url = $"RP/{code}";
        JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }







    protected override async Task OnInitializedAsync()
    {

        try
        {
            currentUser = await _IAuthservice.GetCurrentUserDetailsFromTokenAsync() ?? throw new Exception();

            if (currentUser != null)
            {
                UserBranchId = currentUser.BranchId;


                var roles = currentUser.Roles.ToList();


            }
            else
            {
                // User is not authenticated, redirect to login
                NavigationManager.NavigateTo("/Login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


        try
        {
            var response = await Http.GetFromJsonAsync<List<BranchVMForDrowpDownSelect>>("api/Branches/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProjectVMForDrowpDownSelect>>("api/SubProjects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<ProjectVMForDrowpDownSelect>>("api/Projects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }


        RadioDateType = "Day";


    }




    private void UpdateTable()
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
    }

    private bool CheckProjectSelect(int ProjectId)
    {
        bool _bool = false;
        var project = Projects.Where(x => x.Id == ProjectId).FirstOrDefault();

        if (project != null)
        {
            if (SelectProject.Contains(project.Name))
            {
                _bool = true;
            }
        }


        return _bool;
    }





    private List<GetReceiptDto> data = new List<GetReceiptDto>();




    private async Task SendFilterData()
    {



        // جمع بيانات الفلترة
        receiptWithFilter_VM.RadioDateType = RadioDateType;



        receiptWithFilter_VM.SelectedDate = DateOnly.FromDateTime(selectedDate.Value);
        receiptWithFilter_VM.SelectedMonth1 = DateOnly.FromDateTime(selectedMonth1.Value);
        receiptWithFilter_VM.SelectedMonth2 = DateOnly.FromDateTime(selectedMonth2.Value);
        receiptWithFilter_VM.SelectProject = SelectProject.ToList();
        receiptWithFilter_VM.SelectSubProject = SelectSubProject.ToList();
        receiptWithFilter_VM.SelectBranchId = SelectBranchId.ToList();
        receiptWithFilter_VM.SelectBranchId = SelectBranchId.ToList();
        receiptWithFilter_VM.SelectGrantDestinations = SelectGrantDestinations.ToList();
        receiptWithFilter_VM.SelectPaymentTypes = SelectPaymentTypes.ToList();



        bool IsFilter = receiptWithFilter_VM.SelectGrantDestinations.Count > 0
       || receiptWithFilter_VM.SelectPaymentTypes.Count > 0
       || receiptWithFilter_VM.SelectProject.Count > 0
       || receiptWithFilter_VM.SelectSubProject.Count > 0
       || receiptWithFilter_VM.SelectBranchId.Count > 0;




        bool IsFilterItemsAllSelected = receiptWithFilter_VM.SelectGrantDestinations.Count > 0
      && receiptWithFilter_VM.SelectPaymentTypes.Count > 0
      && receiptWithFilter_VM.SelectProject.Count > 0
      && receiptWithFilter_VM.SelectSubProject.Count > 0
      && receiptWithFilter_VM.SelectBranchId.Count > 0;



        if (((IsFilter == false && IsFilterItemsAllSelected == false) || IsFilterItemsAllSelected) || (IsFilter == false ))
        {

            receiptWithFilter_VM.UserBranchId = currentUser.BranchId;

            // إرسال البيانات إلى واجهة برمجة التطبيقات
            var response = await Http.PostAsJsonAsync("api/Receipts/GetFilteredData", receiptWithFilter_VM);

            // التحقق من الاستجابة
            if (response.IsSuccessStatusCode)
            {

                try
                {

                    // تحويل البيانات المرتجعة إلى قائمة الإيصالات
                    var GetReceiptDtos = await response.Content.ReadFromJsonAsync<List<GetReceiptDto>>();


                    if (GetReceiptDtos != null && receiptWithFilter_VM.UserBranchId==null) { data = GetReceiptDtos.OrderByDescending(x => x.Number).ToList(); }

                    else if (GetReceiptDtos != null && receiptWithFilter_VM.UserBranchId != null) { data = GetReceiptDtos.OrderByDescending(x => x.ReceiptBranchNumber).ToList(); }

                    if (table != null) { await table.ReloadServerData(); }

                }
                catch { }


            }
        }


        else
        {
            _Snackbar.Add($"قم بتحديد عناصر الفلترة", Severity.Error);
        }

    }


    async void ExploreAsExcel()
    {
        if (data != null && data.Count() != 0)
        {
            // FilterData filterData = _Mapper.Map<FilterData>(receiptWithFilter_VM);

            receiptWithFilter_VM.NoPagination = true;

            receiptWithFilter_VM.UserBranchId = currentUser.BranchId;

            var response = await Http.PostAsJsonAsync("api/Receipts/GetReportWithFilteredData", receiptWithFilter_VM);
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileContent = Convert.ToBase64String(fileBytes);
                await JSRuntime.InvokeVoidAsync("downloadFile", fileContent, "ملف التقرير.xls");
            }
            else
            {
                _Snackbar.Add($"حدث خطاء", Severity.Error);
            }
        }
        else
        {
            _Snackbar.Add($"لاتوجد بيانات", Severity.Error);
        }
    }


    private async Task<TableData<GetReceiptDto>> ServerReload(TableState state)
    {

        receiptWithFilter_VM.PageNumber = state.Page + 1;

        receiptWithFilter_VM.PageSize = state.PageSize;

        receiptWithFilter_VM.Search = searchString ?? "";

        receiptWithFilter_VM.NoPagination = true;

        data = data.Where(GetReceiptDto =>
      {
          if (string.IsNullOrWhiteSpace(searchString))
              return true;
          if (GetReceiptDto.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
              return true;
          if (GetReceiptDto.GrantDestinations.GetDisplayName().Contains(searchString, StringComparison.OrdinalIgnoreCase))
              return true;
          if ($"{GetReceiptDto.ReceiptBranchNumWithBranchNum}".Contains(searchString))
              return true;
          if ($"{GetReceiptDto.Mobile}".Contains(searchString))
              return true;
          if (GetReceiptDto.Date.ToString().Equals(searchString)) // إضافة البحث عن التاريخ
              return true;
          return false;
      }).ToList();


        int totalItems = data.Count();

        switch (state.SortLabel)
        {

                 case "id_field":

                if (UserBranchId == null)
                {
                    data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Number).ToList() : data.OrderByDescending(r => r.Number).ToList();

                }
                else
                {
                    data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.ReceiptBranchNumber).ToList() : data.OrderByDescending(r => r.ReceiptBranchNumber).ToList();
                }
                break;
            case "receivedFrom_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.ReceivedFrom).ToList() : data.OrderByDescending(r => r.ReceivedFrom).ToList();
                break;

            case "Date_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Date).ToList() : data.OrderByDescending(r => r.Date).ToList();
                break;

            case "grantDestinations_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.GrantDestinations.GetDisplayName()).ToList() : data.OrderByDescending(r => r.GrantDestinations.GetDisplayName()).ToList();
                break;
            case "totalAmount_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.TotalAmount).ToList() : data.OrderByDescending(r => r.TotalAmount).ToList();
                break;

            case "Branch_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.BranchName).ToList() : data.OrderByDescending(r => r.BranchName).ToList();
                break;

            case "SubProject_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.SubProjectName).ToList() : data.OrderByDescending(r => r.SubProjectName).ToList();
                break;



            case "PaymentType_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.PaymentType.GetDisplayName()).ToList() : data.OrderByDescending(r => r.PaymentType.GetDisplayName()).ToList();
                break;

            case "mobile_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.PaymentType.GetDisplayName()).ToList() : data.OrderByDescending(r => r.Mobile).ToList();
                break;

        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<GetReceiptDto>() { TotalItems = totalItems, Items = pagedData };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        if (table != null) { table.ReloadServerData(); }

    }

    private async Task OpenDetailsDialog(GetReceiptDto GetReceiptDto)
    {
        var parameters = new DialogParameters();


        ReceiptViewModel ReceiptViewModel = new ReceiptViewModel();

        ReceiptViewModel.Id = GetReceiptDto.Id;
        ReceiptViewModel.ReceivedFrom = GetReceiptDto.ReceivedFrom;
        ReceiptViewModel.ReceivedBy = GetReceiptDto.ReceivedBy;
        ReceiptViewModel.TotalAmount = GetReceiptDto.TotalAmount;
        ReceiptViewModel.BranchId = GetReceiptDto.BranchId;
        ReceiptViewModel.SubProjectId = GetReceiptDto.SubProjectId;
        ReceiptViewModel.ForPurpose = GetReceiptDto.ForPurpose;
        ReceiptViewModel.Date = GetReceiptDto.Date;
        ReceiptViewModel.PaymentType = GetReceiptDto.PaymentType;
        ReceiptViewModel.CheckNumber = GetReceiptDto.CheckNumber;
        ReceiptViewModel.ProjectId = GetReceiptDto.ProjectId;
        ReceiptViewModel.GrantDestinations = GetReceiptDto.GrantDestinations;
        ReceiptViewModel.Gender = GetReceiptDto.Gender;
        ReceiptViewModel.Age = GetReceiptDto.Age;
        ReceiptViewModel.Mobile = GetReceiptDto.Mobile;
        ReceiptViewModel.UpdateAmount = GetReceiptDto.UpdateAmount;


        



        // التحقق من القيمة قبل التحويل
        DateTime? dateTime = GetReceiptDto.CheckDate.HasValue ? GetReceiptDto.CheckDate.Value.ToDateTime(TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)) : (DateTime?)null;

        // تعيين القيمة في ViewModel
        ReceiptViewModel.CheckDate = dateTime;



        ReceiptViewModel.AccountNumber = GetReceiptDto.AccountNumber;
        ReceiptViewModel.Bank = GetReceiptDto.Bank;

        string ReceivedByName = "";
        try
        {

            var ReceivedBy = await _IAuthservice.GetUserDetailsByIdAsync(ReceiptViewModel.ReceivedBy) ?? new UserViewModel();
            if (ReceivedBy != null)
            {
                ReceivedByName = ReceivedBy.FirstName + " " + ReceivedBy.LastName;

            }


        }
        catch { }

        ReceiptViewModel.ReceivedByName = ReceivedByName;


        if (ReceiptViewModel.UpdateReceivedFrom != null)
        {
            string UpdateReceivedFromName = "";
            try
            {

                var UpdateReceivedFrom = await _IAuthservice.GetUserDetailsByIdAsync(ReceiptViewModel.UpdateReceivedFrom) ?? new UserViewModel();
                if (UpdateReceivedFrom != null)
                {
                    UpdateReceivedFromName = UpdateReceivedFrom.FirstName + " " + UpdateReceivedFrom.LastName;

                }



            }
            catch { }

            ReceiptViewModel.UpdateReceivedFromName = UpdateReceivedFromName;
        }



        parameters.Add("OriginalReceiptViewModel", ReceiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("Projects", Projects);

        var options = new DialogOptions() { CloseButton = true };


        parameters.Add("BtnName", ButtonTypes.Details);
        _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);




    }
}