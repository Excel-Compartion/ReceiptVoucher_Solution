@page "/ChartReports"
@rendermode InteractiveAuto
@inject HttpClient Http

<PageTitle>Makarim</PageTitle>

<MudGrid class="ChartContainer">
    <MudItem xs="12">
        @if (Series != null && XAxisLabels != null && BarChartNoData != true)
        {
            <MudChart class="" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" CanHideSeries>
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                            fill: rgb(62,44,221);
                        }
                    </style>
                </CustomGraphics>
            </MudChart>
        }
        else
        {
            chartOneDisplay = false;
        }
    </MudItem>


    <MudItem xs="12">
        @if (Series2 != null && XAxisLabels2 != null && LineChartNoData != true)
        {
            <div>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series2" XAxisLabels="@XAxisLabels2" Width="100%" Height="350px" CanHideSeries />
            </div>
        }
        else
        {
            chartTwoDisplay = false;
        }
    </MudItem>


</MudGrid>
<MudGrid class="mt-6">
    <MudItem xs="12" style="text-align: center;">
        @if (chartOneDisplay == false && chartTwoDisplay == false)
        {
            <img Src="Images\dashboard.png" Alt="" Class="" style="max-width: 300px;" />
            <div class="contentOFChart">
                <h2>لاتوجد اشكال بيانية ليتم عرضها </h2>
                <p style="font-weight: 500;color: #8f8f8f;">الرجاء تعبئة معلومات في جداول الاقسام ليم انشاء اشكال بيانية تلقائياً </p>
            </div>
        }


    </MudItem>
</MudGrid>












@code {
    public BranchesBarChartViewModel branchesBarChartViewModel { get; set; } = null!;
    public List<ChartSeries> Series { get; set; } = null!;
    public string[] XAxisLabels { get; set; } = null!;
    private double CenterTotalAmount;
    private bool BarChartNoData = false;
    private bool LineChartNoData = false;

    @* متغيرات عشان نتاكد اذا الديقرامات تم عرضها او لا *@
    bool chartOneDisplay = true;
    bool chartTwoDisplay = true;

    public Dictionary<string, double[]> MainProjectsReportData { get; set; } = new Dictionary<string, double[]>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            branchesBarChartViewModel = await Http.GetFromJsonAsync<BranchesBarChartViewModel>("api/Reports/GetAllBranchesBarChartDataAsync");

            if (branchesBarChartViewModel != null)
            {
                Series = new List<ChartSeries>()
                {
                    new ChartSeries() { Name = GrantDest.Individual.GetDisplayName(), Data = branchesBarChartViewModel.Individual },
                    new ChartSeries() { Name = GrantDest.Company.GetDisplayName(), Data = branchesBarChartViewModel.Company },
                    new ChartSeries() { Name = GrantDest.Association.GetDisplayName(), Data = branchesBarChartViewModel.Association },
                    new ChartSeries() { Name = GrantDest.Foundation.GetDisplayName(), Data = branchesBarChartViewModel.Foundation },
                };

                XAxisLabels = branchesBarChartViewModel.BranchesNames;
            }
        }

        catch { BarChartNoData = true; }




        try
        {
            MainProjectsReportData = await Http.GetFromJsonAsync<Dictionary<string, double[]>>("api/Reports/GetAllProjectsLineChartDataAsync");


            if (MainProjectsReportData != null && MainProjectsReportData.Count() != 0)
            {
                Series2.Clear();
                foreach (var item in MainProjectsReportData)
                {
                    Series2.Add(new ChartSeries() { Name = item.Key, Data = item.Value });
                }
            }


        }
        catch { LineChartNoData = true; }

    }



    public List<ChartSeries> Series2 = new List<ChartSeries>();
    public string[] XAxisLabels2 = { "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر" };


}
