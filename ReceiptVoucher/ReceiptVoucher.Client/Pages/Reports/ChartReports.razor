@page "/ChartReports"
@rendermode InteractiveAuto
@inject HttpClient Http

<PageTitle>Makarim</PageTitle>

@if (Series != null && XAxisLabels != null)
{
    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
        <CustomGraphics>
            <style>
                .heavy {
                    font: bold 30px Helvetica;
                }

                .Rrrrr {
                    font: italic 40px Helvetica;
                    fill: rgb(62,44,221);
                }
            </style>
        </CustomGraphics>
    </MudChart>
}


<div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series2" XAxisLabels="@XAxisLabels2" Width="100%" Height="350px" ChartOptions="@Options" />

</div>





@code {
    public BranchesBarChartViewModel branchesBarChartViewModel { get; set; } = null!;
    public List<ChartSeries> Series { get; set; } = null!;
    public string[] XAxisLabels { get; set; } = null!;
    private double CenterTotalAmount;


    public Dictionary<string, double[]> MainProjectsReportData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        branchesBarChartViewModel = await Http.GetFromJsonAsync<BranchesBarChartViewModel>("api/Reports/GetAllBranchesBarChartDataAsync");

        MainProjectsReportData = await Http.GetFromJsonAsync<Dictionary<string, double[]>>("api/Reports/GetAllProjectsLineChartDataAsync");


        if (branchesBarChartViewModel != null)
        {
            Series = new List<ChartSeries>()
            {
                new ChartSeries() { Name = "فرد", Data = branchesBarChartViewModel.Individual },
                new ChartSeries() { Name = "شركة", Data = branchesBarChartViewModel.Company },
                new ChartSeries() { Name = "جمعية", Data = branchesBarChartViewModel.Association },
                new ChartSeries() { Name = "مؤوسسة", Data = branchesBarChartViewModel.Foundation },
            };

            XAxisLabels = branchesBarChartViewModel.BranchesNames;
        }

        if (MainProjectsReportData != null && MainProjectsReportData.Count() != 0)
        {
            // تحديث Series2 بالقيم من MainProjectsReportData
            Series2.Clear();
            foreach (var item in MainProjectsReportData)
            {
                Series2.Add(new ChartSeries() { Name = item.Key, Data = item.Value });
            }
        }


    }





    /// <summary>
    /// bar line
    /// </summary>

    ///



    public ChartOptions Options = new ChartOptions();

    public List<ChartSeries> Series2 = new List<ChartSeries>();
    public string[] XAxisLabels2 = { "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "أكتوبر", "نوفمبر", "ديسمبر" };


}
