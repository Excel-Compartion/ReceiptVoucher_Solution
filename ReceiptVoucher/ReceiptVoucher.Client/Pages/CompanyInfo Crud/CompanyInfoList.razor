@page "/CompanyInfo"
@rendermode InteractiveAuto

@inject HttpClient Http

@inject IDialogService _DialogService 
@inject ISnackbar _Snackbar

<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<CompanyInfo>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton OnClick="OpenAddDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success">اضافة معلومات الشركه</MudButton>
        &nbsp;&nbsp;
        <MudText Typo="Typo.h6">CompanyInfo</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="CompanyInfo">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="CompanyInfo">Mobile</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">LicenseNumber</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">Telephone</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="CompanyInfo">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">Web</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">IVT</MudTableSortLabel></MudTh>

       
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Mobile">@context.Mobile</MudTd>
            <MudTd DataLabel="LicenseNumber">@context.LicenseNumber</MudTd>
            <MudTd DataLabel="Telephone">@context.Telephone</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Web">@context.Web</MudTd>
            <MudTd DataLabel="IVT">@context.IVT</MudTd>



        <!--Edit & Delete btn-->
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="@(() => OpenEditDialog(context))">Edit</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="@(() => DeleteCompanyInfo(context.Id))">Delete</MudButton>

        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




    @code {
    public IEnumerable<CompanyInfo> pagedData;
    private MudTable<CompanyInfo> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<CompanyInfo> data = new List<CompanyInfo>();

    private async Task<TableData<CompanyInfo>> ServerReload(TableState state)
    {
        data = await Http.GetFromJsonAsync<List<CompanyInfo>>("https://localhost:7210/api/CompanyInfos/GetAllAsync");
       
        data = data.Where(companyInfo =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (companyInfo.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{companyInfo.Id}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<CompanyInfo>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}



   



    <!--==================     Add / Edit Dialog      =========================================-->

        @code {
        private void OpenAddDialog()
        {
            var parameters = new DialogParameters();
            parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
            parameters.Add("BtnName", "اضافه");

            _DialogService.Show<_CompanyInfo_Add_Dialog>("اضافة فرع جديد", parameters);
        }

        private void OpenEditDialog(CompanyInfo CompanyInfo)
        {
            var parameters = new DialogParameters();
            parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
            parameters.Add("OriginalCompanyInfo", CompanyInfo);
            parameters.Add("BtnName", "تعديل");

            _DialogService.Show<_CompanyInfo_Add_Dialog>("تعديل الفرع", parameters);
        }

        private async void RefreshData(bool dialogResult)
        {
            if (dialogResult)
            {
                // Reload the table data
                table.ReloadServerData();
            }
        }

    private async Task DeleteCompanyInfo(int CompanyInfoId)
        {
            CompanyInfo? selectedCompanyInfo = data.SingleOrDefault(b => b.Id == CompanyInfoId);

            if (selectedCompanyInfo != null)
            {
                var parameters = new DialogParameters() { { "CompanyInfoName", selectedCompanyInfo.Name } };
                var dialog = _DialogService.Show<_CompanyInfoConfirmDeleteDialog>("الرجاء التأكيد", parameters);

                var result = await dialog.Result;

                if (!result.Cancelled && result.Data is bool data && data)
                {
                    // User confirmed deletion, proceed with deletion

                    // Try to delete the CompanyInfo using the API controller
                    var response = await Http.DeleteAsync($"https://localhost:7210/api/CompanyInfos/{CompanyInfoId}");

                    if (response.IsSuccessStatusCode)
                    {
                        // Show a success message
                        _Snackbar.Add("تم حذف بيانات معلومات الشركه بنجاح", Severity.Success);

                        // Reload the table data
                        table.ReloadServerData();
                    }
                    else
                    {
                        // Deletion failed
                        _Snackbar.Add("حدث خطاء اثناء حذف بيانات معلومات الشركه!", Severity.Error);
                    }

                    StateHasChanged();
                }
            }
        }
    }



