@page "/CompanyInfo"
@rendermode InteractiveAuto

@inject HttpClient Http

@inject IDialogService _DialogService 
@inject ISnackbar _Snackbar



<PageTitle>Makarim</PageTitle>
<br />


<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <span style="background-color:#DBE9FA ;font-size:x-large;color:#52595D">

        <MudIcon Icon="@Icons.Material.Outlined.Info" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        معلومات الشركة

        <b style="color:dodgerblue;font-size:xx-large">|</b>


    </span>

</p>

<MudTable ServerData="@(new Func<TableState, Task<TableData<CompanyInfo>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>

        @* <MudButton OnClick="OpenAddDialog" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary">اضافة معلومات الشركه</MudButton> *@
     

  
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">اسم الشركه</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="CompanyInfo">رقم الجوال</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">رقم الرخصه</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">رقم الهاتف</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="CompanyInfo">البريد الالكتروني</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">الموقع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">IVT</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="name_field" T="CompanyInfo">الاجراءت</MudTableSortLabel></MudTh>

       
    </HeaderContent>
    <RowTemplate>
           
            <MudTd DataLabel="اسم الشركه">@context.Name</MudTd>
            <MudTd DataLabel="الجوال">@context.Mobile</MudTd>
            <MudTd DataLabel="رقم لارخصه">@context.LicenseNumber</MudTd>
            <MudTd DataLabel="الهاتف">@context.Telephone</MudTd>
            <MudTd DataLabel="الجيميل">@context.Email</MudTd>
            <MudTd DataLabel="الموقع الالكتروني">@context.Web</MudTd>
            <MudTd DataLabel="IVT">@context.IVT</MudTd>


            <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                <MudButton Color="Color.Info" Variant="Variant.Outlined" @onclick="@(() => OpenEditDialog(context))">تعديل</MudButton>
               @*  <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="@(() => DeleteCompanyInfo(context.Id))">حدف</MudButton> *@
            </MudButtonGroup>


    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




    @code {
    public IEnumerable<CompanyInfo> pagedData;
    private MudTable<CompanyInfo> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<CompanyInfo> data = new List<CompanyInfo>();

    private async Task<TableData<CompanyInfo>> ServerReload(TableState state)
    {
        data = await Http.GetFromJsonAsync<List<CompanyInfo>>("api/CompanyInfos/GetAllAsync");
       
        data = data.Where(companyInfo =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (companyInfo.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{companyInfo.Id}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<CompanyInfo>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}



   



    <!--==================     Add / Edit Dialog      =========================================-->

        @code {

        
        private void OpenAddDialog()
        {
        var options = new DialogOptions() { CloseButton = true };

            var parameters = new DialogParameters();
            parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
            parameters.Add("BtnName", "اضافه");

       

            _DialogService.Show<_CompanyInfo_Add_Dialog>("اضافة فرع جديد", parameters,options);
        }

        private void OpenEditDialog(CompanyInfo CompanyInfo)
        {
        var options = new DialogOptions() { CloseButton = true };

            var parameters = new DialogParameters();
            parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
            parameters.Add("OriginalCompanyInfo", CompanyInfo);
            parameters.Add("BtnName", "تعديل");

        _DialogService.Show<_CompanyInfo_Add_Dialog>("تعديل الفرع", parameters, options);
        }

        private async void RefreshData(bool dialogResult)
        {
            if (dialogResult)
            {
                // Reload the table data
                table.ReloadServerData();
            }
        }

    private async Task DeleteCompanyInfo(int CompanyInfoId)
        {
            CompanyInfo? selectedCompanyInfo = data.SingleOrDefault(b => b.Id == CompanyInfoId);

            if (selectedCompanyInfo != null)
            {
                var parameters = new DialogParameters() { { "CompanyInfoName", selectedCompanyInfo.Name } };
                var dialog = _DialogService.Show<_CompanyInfoConfirmDeleteDialog>("الرجاء التأكيد", parameters);

                var result = await dialog.Result;

                if (!result.Cancelled && result.Data is bool data && data)
                {
                    // User confirmed deletion, proceed with deletion

                    // Try to delete the CompanyInfo using the API controller
                    var response = await Http.DeleteAsync($"api/CompanyInfos/{CompanyInfoId}");

                    if (response.IsSuccessStatusCode)
                    {
                        // Show a success message
                        _Snackbar.Add("تم حذف بيانات معلومات الشركه بنجاح", Severity.Success);

                        // Reload the table data
                        table.ReloadServerData();
                    }
                    else
                    {
                        // Deletion failed
                        _Snackbar.Add("حدث خطاء اثناء حذف بيانات معلومات الشركه!", Severity.Error);
                    }

                    StateHasChanged();
                }
            }
        }
    }



