@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http




<MudDialog Class="custom-modal" Style=" max-width: unset; width: 90%; ">
    <DialogContent>

        <EditForm Model="@ReceiptViewModel" OnValidSubmit="Submit" Class="custom-form">
            <DataAnnotationsValidator />




            <MudGrid>
                <MudItem xs="4">
                    <MudTextField Label="اسم المودع" For="@(()=>ReceiptViewModel.ReceivedFrom)" Immediate="true" @bind-Value="@ReceiptViewModel.ReceivedFrom" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Label="نوع الدفع" Immediate="true" For="@(()=>ReceiptViewModel.PaymentType)" @bind-Value="@ReceiptViewModel.PaymentType" ReadOnly="@ReadOnlyStatus">
                        <MudSelectItem Value="@PaymentTypes.Cash">@PaymentTypes.Cash.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@PaymentTypes.Check">@PaymentTypes.Check.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@PaymentTypes.Account">@PaymentTypes.Account.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@PaymentTypes.Bank">@PaymentTypes.Bank.GetDisplayName()</MudSelectItem>

                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="اجمالي المبلغ" For="@(()=>ReceiptViewModel.TotalAmount)" Immediate="true" @bind-Value="@ReceiptViewModel.TotalAmount" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>
                    </MudItem>
                </MudGrid>







                @{

                if (ReceiptViewModel.PaymentType == PaymentTypes.Cash)
                {

                    ReceiptViewModel.CheckNumber = 10000000;
                    ReceiptViewModel.CheckDate = DateTime.Now;

                    ReceiptViewModel.AccountNumber = 10000000;
                    ReceiptViewModel.Bank = "--";




                }

                // نوع الدفع عبر شيك
                if (ReceiptViewModel.PaymentType == PaymentTypes.Check)
                {



                    if (ReceiptViewModel.CheckNumber == 10000000)
                    {
                        ReceiptViewModel.CheckNumber = null;
                        ReceiptViewModel.CheckDate = null;

                        isCheckNumberCleared = true;
                        isCheckDateCleared = true;
                    }



                    ReceiptViewModel.AccountNumber = 10000000;
                    ReceiptViewModel.Bank = "--";

                    <MudGrid>
                        <MudItem xs="6">
                            <MudDatePicker Color="Color.Info" For="@(()=>ReceiptViewModel.CheckDate)" @bind-Date="ReceiptViewModel.CheckDate" Label="تاريخ الشيك" ReadOnly="@ReadOnlyStatus" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="رقم الشيك" Immediate="true" For="@(()=>ReceiptViewModel.CheckNumber)" @bind-Value="@ReceiptViewModel.CheckNumber" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>
                        </MudItem>
                    </MudGrid>






                }

                // نوع الدفع عبر الحساب
                else if (ReceiptViewModel.PaymentType == PaymentTypes.Account)
                {

                    if (ReceiptViewModel.AccountNumber == 10000000)
                    {
                        ReceiptViewModel.AccountNumber = null;
                        isAccountNumberCleared = true;
                    }

                    ReceiptViewModel.CheckNumber = 10000000;

                    ReceiptViewModel.CheckDate = DateTime.Now;

                    ReceiptViewModel.Bank = "--";


                    <MudTextField Label="رقم الحساب" Immediate="true" For="@(()=>ReceiptViewModel.AccountNumber)" @bind-Value="@ReceiptViewModel.AccountNumber" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>


                }

                //نوع الدفع عبر البنك
                else if (ReceiptViewModel.PaymentType == PaymentTypes.Bank)
                {

                    if (ReceiptViewModel.Bank == "--")
                    {
                        ReceiptViewModel.Bank = null;
                        isBankNameCleared = true;
                    }
                    ReceiptViewModel.CheckNumber = 10000000;

                    ReceiptViewModel.AccountNumber = 10000000;

                    ReceiptViewModel.CheckDate = DateTime.Now;



                    <MudTextField Label="اسم البنك" For="@(()=>ReceiptViewModel.Bank)" Immediate="true" @bind-Value="@ReceiptViewModel.Bank" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>

                }

            }





            <MudGrid>
                <MudItem xs="6">
                    <MudSelect Label="وجهة المنحة" For="@(()=>ReceiptViewModel.GrantDestinations)" @bind-Value="@ReceiptViewModel.GrantDestinations" ReadOnly="@ReadOnlyStatus">
                        <MudSelectItem Value="@GrantDest.Message">@GrantDest.Message.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@GrantDest.Individual">@GrantDest.Individual.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@GrantDest.Company">@GrantDest.Company.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@GrantDest.Association">@GrantDest.Association.GetDisplayName()</MudSelectItem>
                            <MudSelectItem Value="@GrantDest.Foundation">@GrantDest.Foundation.GetDisplayName()</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="رقم الجوال" For="@(()=>ReceiptViewModel.Mobile)" Immediate="true" @bind-Value="@ReceiptViewModel.Mobile" Adornment="Adornment.End" AdornmentColor="Color.Success" ReadOnly="@ReadOnlyStatus"></MudTextField>
                    </MudItem>
                </MudGrid>

                @if (ReceiptViewModel.GrantDestinations == GrantDest.Individual)
            {

                <br />





                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect Label="العمر" For="@(()=>ReceiptViewModel.Age)" @bind-Value="@ReceiptViewModel.Age" ReadOnly="@ReadOnlyStatus">
                            <MudSelectItem Value="@Age.Message">@Age.Message.GetDisplayName()</MudSelectItem>

                                <MudSelectItem Value="@Age.TwentyYounger">@Age.TwentyYounger.GetDisplayName()</MudSelectItem>
                                <MudSelectItem Value="@Age.OverTwenty">@Age.OverTwenty.GetDisplayName()</MudSelectItem>

                                <MudSelectItem Value="@Age.OverThirty">@Age.OverThirty.GetDisplayName()</MudSelectItem>
                                <MudSelectItem Value="@Age.OverForty">@Age.OverForty.GetDisplayName()</MudSelectItem>

                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <div>الجنس</div>

                            <MudRadioGroup @bind-Value="ReceiptViewModel.Gender" Style="margin-right:10%" ReadOnly="@ReadOnlyStatus">
                                <MudRadio Value="Gender.Male" Color="Color.Primary" Size="Size.Small">@Gender.Male.GetDisplayName()</MudRadio>
                                <MudRadio Value="Gender.Female" Color="Color.Secondary" Size="Size.Small">@Gender.Female.GetDisplayName()</MudRadio>
                            </MudRadioGroup>

                        </MudItem>
                    </MudGrid>



            }
            ///تعيين قيم افتراضيه ل كل من Age ,Gender لتجنب المطالبه
            else
            {
                ReceiptViewModel.Age = Age.TwentyYounger;

                ReceiptViewModel.Gender = Gender.Male;
            }


            @*             <MudTextField Label="اسم المحاسب" For="@(()=>ReceiptViewModel.ReceivedBy)" Immediate="true" @bind-Value="@ReceiptViewModel.ReceivedBy" Adornment="Adornment.End"   AdornmentColor="Color.Success"></MudTextField>
            *@






      
            <br />



            <MudGrid>
                <MudItem xs="4">
                    <MudSelect Label="الفرع" For="@(()=>ReceiptViewModel.BranchId)" @bind-Value="@ReceiptViewModel.BranchId" ReadOnly="@ReadOnlyStatus">
                        <MudSelectItem Value="0">--- اختيار اسم الفرع ---</MudSelectItem>
                        @foreach (var branch in Branches)
                        {
                            <MudSelectItem Value="@branch.Id">@branch.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="4">
                    <MudSelect Label="المشروع الرئيسي" For="@(()=>ReceiptViewModel.ProjectId)" @bind-Value="@ReceiptViewModel.ProjectId" ReadOnly="@ReadOnlyStatus">
                        <MudSelectItem Value="0">--- اختيار اسم المشروع الرئيسي ---</MudSelectItem>
                        @foreach (var project in Projects)
                        {
                            <MudSelectItem Value="@project.Id">@project.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                @if (ReceiptViewModel.ProjectId == 0 )
                {
                    ReceiptViewModel.SubProjectId = 0;
                }

                <MudItem xs="4">
                    <MudSelect Label="المشروع الفرعي" For="@(()=>ReceiptViewModel.SubProjectId)" @bind-Value="@ReceiptViewModel.SubProjectId" ReadOnly="@ReadOnlyStatus">
                        <MudSelectItem Value="0">--- اختيار اسم المشروع الفرعي ---</MudSelectItem>
                        @foreach (var subProject in SubProjects)
                        {
                            @if (ReceiptViewModel.ProjectId != 0 && subProject.ProjectId == ReceiptViewModel.ProjectId)


                            {
                                <MudSelectItem Value="@subProject.Id">@subProject.Name</MudSelectItem>
                            }


                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>









            <MudTextField T="string" Label="الوصف" Variant="Variant.Text" For="@(()=>ReceiptViewModel.ForPurpose)" Immediate="true" @bind-Value="@ReceiptViewModel.ForPurpose" AdornmentColor="Color.Success" Lines="2" ReadOnly="@ReadOnlyStatus" />

            @if (BtnName != ButtonTypes.Details)
            {
                <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="custom-button">@BtnName</MudButton>
            }

            <br />

        </EditForm>
    </DialogContent>

</MudDialog>




@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public ReceiptViewModel OriginalReceiptViewModel { get; set; }


    [Parameter]
    public string BtnName { get; set; }

    string Icon = string.Empty;


    [Parameter]
    public List<Branch> Branches { get; set; }

    [Parameter]
    public List<Project> Projects { get; set; }

    [Parameter]
    public List<SubProject> SubProjects { get; set; }

    public ReceiptViewModel ReceiptViewModel { get; set; }


    bool isCheckNumberCleared = false;

    bool isCheckDateCleared = false;

    bool isAccountNumberCleared = false;

    bool isBankNameCleared = false;


    string ProjectName = "";

    bool ReadOnlyStatus = false;




    protected override void OnParametersSet()
    {
        if (OriginalReceiptViewModel == null)
        {
            ReceiptViewModel = new ReceiptViewModel();


            // Set the default value for PaymentType
            ReceiptViewModel.PaymentType = PaymentTypes.Cash;





        }



        else
        {



            ReceiptViewModel = new ReceiptViewModel
                {
                    Id = OriginalReceiptViewModel.Id,
                    ReceivedFrom = OriginalReceiptViewModel.ReceivedFrom,
                    ReceivedBy = OriginalReceiptViewModel.ReceivedBy,
                    TotalAmount = OriginalReceiptViewModel.TotalAmount,
                    BranchId = OriginalReceiptViewModel.BranchId,
                    SubProjectId = OriginalReceiptViewModel.SubProjectId,
                    ForPurpose = OriginalReceiptViewModel.ForPurpose,
                    Date = OriginalReceiptViewModel.Date,
                    GrantDestinations = OriginalReceiptViewModel.GrantDestinations,
                    Mobile = OriginalReceiptViewModel.Mobile,
                    Age = OriginalReceiptViewModel.Age,
                    Gender = OriginalReceiptViewModel.Gender,
                    ProjectId = OriginalReceiptViewModel.ProjectId,




                    //PaymentType Related prop
                    PaymentType = OriginalReceiptViewModel.PaymentType,
                    CheckNumber = OriginalReceiptViewModel.CheckNumber,
                    CheckDate = OriginalReceiptViewModel.CheckDate,
                    AccountNumber = OriginalReceiptViewModel.AccountNumber,
                    Bank = OriginalReceiptViewModel.Bank,



                };


            if (BtnName == ButtonTypes.Details)
            {
                ReadOnlyStatus = true;
            }


        }
    }




    async void Submit()
    {




            Receipt receipt = new Receipt();


            receipt.ReceivedFrom = ReceiptViewModel.ReceivedFrom;
            receipt.ReceivedBy = ReceiptViewModel.ReceivedBy;
            receipt.TotalAmount = ReceiptViewModel.TotalAmount;
            receipt.BranchId = ReceiptViewModel.BranchId;
            receipt.SubProjectId = ReceiptViewModel.SubProjectId;
            receipt.ForPurpose = ReceiptViewModel.ForPurpose;
            receipt.Date = ReceiptViewModel.Date;
            receipt.PaymentType = ReceiptViewModel.PaymentType;
            receipt.GrantDestinations = ReceiptViewModel.GrantDestinations;
            receipt.Mobile = ReceiptViewModel.Mobile;
            receipt.ProjectId = ReceiptViewModel.ProjectId;



            if (ReceiptViewModel.GrantDestinations == GrantDest.Individual) { receipt.Gender = ReceiptViewModel.Gender; receipt.Age = ReceiptViewModel.Age; }





            switch (ReceiptViewModel.PaymentType)
            {
                case PaymentTypes.Check:
                    receipt.CheckNumber = ReceiptViewModel.CheckNumber;



                    // إذا كان ReceiptViewModel.CheckDate ليس فارغًا null ، فقم بتحويله إلى DateOnly وتعيينه لـ receipt.CheckDate
                    // إذا كان ReceiptViewModel.CheckDate فارغًا null ، فاترك receipt.CheckDate كما هو
                    receipt.CheckDate = ReceiptViewModel.CheckDate.HasValue ? DateOnly.FromDateTime(ReceiptViewModel.CheckDate.Value) : receipt.CheckDate;


                    break;
                case PaymentTypes.Account:
                    receipt.AccountNumber = ReceiptViewModel.AccountNumber;
                    break;
                case PaymentTypes.Bank:
                    receipt.Bank = ReceiptViewModel.Bank;
                    break;

            }


            if (ReceiptViewModel.Id == 0)
            {

                var response = await Http.PostAsJsonAsync("api/Receipts/AddOneAsync", receipt);
                if (response.IsSuccessStatusCode)
                {
                    _Snackbar.Add("تم اضافه السند بنجاح", Severity.Success);
                }
                else
                {
                    _Snackbar.Add($"فشل في اضافه السند : {response.StatusCode}", Severity.Error);
                }


            }
            else
            {
                receipt.Id = ReceiptViewModel.Id;

                var response = await Http.PutAsJsonAsync("api/Receipts", receipt);
                if (response.IsSuccessStatusCode)
                {
                    _Snackbar.Add("تم تعديل السند بنجاح", Severity.Success);
                }
                else
                {
                    _Snackbar.Add($"فشل في تعديل السند : {response.StatusCode}", Severity.Error);
                }



            }

            MudDialog.Close(DialogResult.Ok(true));
            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        
    }



    void Cancel() => MudDialog.Cancel();


}




