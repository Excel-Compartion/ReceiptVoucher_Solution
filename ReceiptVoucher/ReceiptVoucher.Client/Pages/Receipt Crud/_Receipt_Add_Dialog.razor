@using System.ComponentModel.DataAnnotations
@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http


<MudDialog Class="custom-modal" Style="width: 100vw; height: auto">
    <DialogContent>
        <EditForm Model="@Receipt" OnValidSubmit="Submit" Class="custom-form"  >
            <DataAnnotationsValidator />
           

            <MudTextField Label="اسم المودع" For="@(()=>Receipt.ReceivedFrom)" Immediate="true" @bind-Value="@Receipt.ReceivedFrom" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            
            <MudTextField   Label="اسم المحاسب"   For="@(()=>Receipt.ReceivedBy)" Immediate="true" @bind-Value="@Receipt.ReceivedBy" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudSelect Label="نوع الدفع" For="@(()=>Receipt.PaymentType)" @bind-Value="@Receipt.PaymentType">

                <MudSelectItem Value="@PaymentType.Cash">@PaymentType.Cash</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Check" >@PaymentType.Check</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Account" >@PaymentType.Account</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Bank">@PaymentType.Bank</MudSelectItem>
                   

                </MudSelect>

                @{

                // نوع الدفع عبر شيك
                if (Receipt.PaymentType == PaymentType.Check)
                {
                    <MudTextField  Label="رقم الشيك" For="@(()=>Receipt.CheckNumber)" Immediate="true" @bind-Value="@Receipt.CheckNumber" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

                    <MudDatePicker @bind-Value="@Receipt.CheckDate" Label="تاريخ الشيك" />

                }

                // نوع الدفع عبر الحساب
                else if (Receipt.PaymentType == PaymentType.Account)
                {
                    <MudTextField  Label="رقم الحساب" For="@(()=>Receipt.AccountNumber)" Immediate="true" @bind-Value="@Receipt.AccountNumber" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>


                }

                //نوع الدفع عبر البنك 
                else if (Receipt.PaymentType == PaymentType.Bank)
                {
                    <MudTextField Label="اسم البنك" For="@(()=>Receipt.Bank)" Immediate="true" @bind-Value="@Receipt.Bank" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

                }

                }
             

           
            

            <MudTextField Label="اجمالي المبلغ" For="@(()=>Receipt.TotalAmount)" Immediate="true" @bind-Value="@Receipt.TotalAmount" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudSelect Label="الفرع" For="@(()=>Receipt.BranchId)" @bind-Value="@Receipt.BranchId">
                <MudSelectItem Value="0">--- اختيار اسم الفرع ---</MudSelectItem>
                @foreach (var branch in Branches)
                {
                    <MudSelectItem Value="@branch.Id">@branch.Name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect Label="المشروع الفرعي" For="@(()=>Receipt.SubProjectId)" @bind-Value="@Receipt.SubProjectId">
                <MudSelectItem Value="0">--- اختيار اسم المشروع الفرعي ---</MudSelectItem>
                @foreach (var subProject in SubProjects)
                {
                    <MudSelectItem Value="@subProject.Id">@subProject.Name</MudSelectItem>
                }
            </MudSelect>


            <MudTextField Label="الغرض" For="@(()=>Receipt.ForPurpose)" Immediate="true" @bind-Value="@Receipt.ForPurpose" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>


            <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="custom-button">@BtnName</MudButton>

             </EditForm>
    </DialogContent>
 
</MudDialog>




    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public Receipt OriginalReceipt { get; set; }


    [Parameter]
    public string BtnName { get; set; }

    string Icon = string.Empty;


    [Parameter]
    public List<Branch> Branches { get; set; }

    [Parameter]
    public List<SubProject> SubProjects { get; set; }

    public Receipt Receipt { get; set; }





    protected override void OnParametersSet()
    {
        if (OriginalReceipt == null)
        {
            Receipt = new Receipt();

            // Set the default value for PaymentType
            Receipt.PaymentType = PaymentType.Cash;
            


        }
        else
        {

           

            Receipt = new Receipt
                {
                    Id = OriginalReceipt.Id,
                    ReceivedFrom = OriginalReceipt.ReceivedFrom,
                    ReceivedBy = OriginalReceipt.ReceivedBy,
                    TotalAmount = OriginalReceipt.TotalAmount,
                    BranchId = OriginalReceipt.BranchId,
                    SubProjectId = OriginalReceipt.SubProjectId,
                    ForPurpose = OriginalReceipt.ForPurpose,
                    Date = OriginalReceipt.Date,
                    PaymentType=OriginalReceipt.PaymentType

                
            };


        }
    }



    async void Submit()
    {
       

        if (!string.IsNullOrWhiteSpace(Receipt.ReceivedFrom))
        {
            if (Receipt.Id == 0)
            {
                // The branch has no ID, so it's a new branch
                await Http.PostAsJsonAsync("https://localhost:7210/api/Receipts/AddOneAsync", Receipt);
                // Show a success message
                _Snackbar.Add("Branch added successfully!", Severity.Success);
            }
            else
            {
                await Http.PutAsJsonAsync("https://localhost:7210/api/Receipts", Receipt);
                _Snackbar.Add("Branch updated successfully!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));
            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }



    void Cancel() => MudDialog.Cancel();

    
}




