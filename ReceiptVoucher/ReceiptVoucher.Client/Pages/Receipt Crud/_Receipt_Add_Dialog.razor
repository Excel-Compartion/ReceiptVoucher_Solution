@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http


<MudDialog Class="custom-modal" Style="width: 100vw; height: auto">
    <DialogContent>
        <EditForm Model="@Receipt" Class="custom-form">
            <DataAnnotationsValidator />

            <MudTextField Immediate="true" @bind-Value="@Receipt.ReceivedFrom"  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Immediate="true" @bind-Value="@Receipt.ReceivedBy"  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Immediate="true" @bind-Value="@Receipt.TotalAmount"  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Immediate="true" @bind-Value="@Receipt.BranchId" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Immediate="true" @bind-Value="@Receipt.SubProjectId" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Immediate="true" @bind-Value="@Receipt.ForPurpose" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>






           
            
            
             </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Class="custom-button">@BtnName</MudButton>
    </DialogActions>
</MudDialog>




    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public Receipt OriginalReceipt { get; set; }


    [Parameter]
    public string BtnName { get; set; }

    string Icon = string.Empty;


    public Receipt Receipt { get; set; }



    protected override void OnParametersSet()
    {
        if (OriginalReceipt == null)
        {
            Receipt = new Receipt();

        }
        else
        {

            //         [Key]
            //         public int Id { get; set; }

            //         [StringLength(250)]
            //         public string ReceivedFrom { get; set; } = null!;

            //         [StringLength(10)]
            //         public string? ReceivedBy { get; set; }     // Foreign Key From User

            //         [Column(TypeName = "decimal(18, 2)")]
            //         public decimal TotalAmount { get; set; }

            // public int BranchId { get; set; }   // Foreign Key

            // [Column("Sub_ProjectId")]
            // public int SubProjectId { get; set; }   // Foreign Key

            // [StringLength(500)]
            // public string ForPurpose { get; set; } = null!;

            // public DateOnly Date { get; set; }

            Receipt = new Receipt
                {
                    Id = OriginalReceipt.Id,
                    ReceivedFrom = OriginalReceipt.ReceivedFrom,
                    ReceivedBy = OriginalReceipt.ReceivedBy,
                    TotalAmount = OriginalReceipt.TotalAmount,
                    BranchId = OriginalReceipt.BranchId,
                    SubProjectId = OriginalReceipt.SubProjectId,
                    ForPurpose = OriginalReceipt.ForPurpose,
                    Date = OriginalReceipt.Date

                
            };


        }
    }

    async void Submit()
    {
        if (!string.IsNullOrWhiteSpace(Receipt.ReceivedFrom))
        {
            if (Receipt.Id == 0)
            {
                // The branch has no ID, so it's a new branch

                await Http.PostAsJsonAsync("https://localhost:7210/api/Receipts/AddOneAsync", Receipt);

                // Show a success message
                _Snackbar.Add("Branch added successfully!", Severity.Success);
            }

            else
            {

                await Http.PutAsJsonAsync("https://localhost:7210/api/Receipts", Receipt);
                _Snackbar.Add("Branch updated successfully!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));

            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }


    void Cancel() => MudDialog.Cancel();

    
}




