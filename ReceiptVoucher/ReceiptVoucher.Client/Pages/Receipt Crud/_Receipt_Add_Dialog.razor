@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http




<MudDialog Class="custom-modal" Style="width: 100vw; height: auto "  >
    <DialogContent>
        <EditForm Model="@ReceiptViewModel" OnValidSubmit="Submit" Class="custom-form"  >
            <DataAnnotationsValidator />
           

            <MudTextField Label="اسم المودع" For="@(()=>ReceiptViewModel.ReceivedFrom)" Immediate="true" @bind-Value="@ReceiptViewModel.ReceivedFrom" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
            
            <MudTextField   Label="اسم المحاسب"   For="@(()=>ReceiptViewModel.ReceivedBy)" Immediate="true" @bind-Value="@ReceiptViewModel.ReceivedBy" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudSelect Label="نوع الدفع" Immediate="true" For="@(()=>ReceiptViewModel.PaymentType)" @bind-Value="@ReceiptViewModel.PaymentType">
                <MudSelectItem Value="@PaymentType.Cash">@PaymentType.Cash</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Check" >@PaymentType.Check</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Account" >@PaymentType.Account</MudSelectItem>
                <MudSelectItem Value="@PaymentType.Bank">@PaymentType.Bank</MudSelectItem>
                   

                </MudSelect>

                @{

                if (ReceiptViewModel.PaymentType == PaymentType.Cash)
                {

                    ReceiptViewModel.CheckNumber = 10000000;
                    ReceiptViewModel.CheckDate = DateTime.Now;

                    ReceiptViewModel.AccountNumber = 10000000;
                    ReceiptViewModel.Bank = "--";




                }

                // نوع الدفع عبر شيك
                if (ReceiptViewModel.PaymentType == PaymentType.Check)
                {



                    if ( ReceiptViewModel.CheckNumber == 10000000)
                    {
                        ReceiptViewModel.CheckNumber = null;
                        ReceiptViewModel.CheckDate = null;

                        isCheckNumberCleared = true;
                        isCheckDateCleared = true;
                    }



                    ReceiptViewModel.AccountNumber = 10000000;
                    ReceiptViewModel.Bank = "--";
                    

                    <MudTextField Label="رقم الشيك" Immediate="true" For="@(()=>ReceiptViewModel.CheckNumber)" @bind-Value="@ReceiptViewModel.CheckNumber" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

                    <MudDatePicker For="@(()=>ReceiptViewModel.CheckDate)" @bind-Date="ReceiptViewModel.CheckDate" Label="تاريخ الشيك" />




                }

                // نوع الدفع عبر الحساب
                else if (ReceiptViewModel.PaymentType == PaymentType.Account)
                {

                    if ( ReceiptViewModel.AccountNumber == 10000000)
                    {
                        ReceiptViewModel.AccountNumber = null;
                        isAccountNumberCleared = true;
                    }

                    ReceiptViewModel.CheckNumber = 10000000;

                    ReceiptViewModel.CheckDate = DateTime.Now;

                    ReceiptViewModel.Bank = "--";


                    <MudTextField Label="رقم الحساب" Immediate="true" For="@(()=>ReceiptViewModel.AccountNumber)" @bind-Value="@ReceiptViewModel.AccountNumber" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>


                }

                //نوع الدفع عبر البنك 
                else if (ReceiptViewModel.PaymentType == PaymentType.Bank)
                {

                    if ( ReceiptViewModel.Bank=="--")
                    {
                        ReceiptViewModel.Bank = null;
                        isBankNameCleared = true;
                    }
                    ReceiptViewModel.CheckNumber = 10000000;
                    
                    ReceiptViewModel.AccountNumber = 10000000;
                   


                    <MudTextField Label="اسم البنك" For="@(()=>ReceiptViewModel.Bank)" Immediate="true" @bind-Value="@ReceiptViewModel.Bank" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

                }

                }
             

           
            

            <MudTextField Label="اجمالي المبلغ" For="@(()=>ReceiptViewModel.TotalAmount)" Immediate="true" @bind-Value="@ReceiptViewModel.TotalAmount" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudSelect Label="الفرع" For="@(()=>ReceiptViewModel.BranchId)" @bind-Value="@ReceiptViewModel.BranchId">
                <MudSelectItem Value="0">--- اختيار اسم الفرع ---</MudSelectItem>
                @foreach (var branch in Branches)
                {
                    <MudSelectItem Value="@branch.Id">@branch.Name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect Label="المشروع الفرعي" For="@(()=>ReceiptViewModel.SubProjectId)" @bind-Value="@ReceiptViewModel.SubProjectId">
                <MudSelectItem Value="0">--- اختيار اسم المشروع الفرعي ---</MudSelectItem>
                @foreach (var subProject in SubProjects)
                {
                    <MudSelectItem Value="@subProject.Id">@subProject.Name</MudSelectItem>
                }
            </MudSelect>


            <MudTextField Label="الغرض" For="@(()=>ReceiptViewModel.ForPurpose)" Immediate="true" @bind-Value="@ReceiptViewModel.ForPurpose" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            @if (BtnName != ButtonTypes.Details)
            {
                <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="custom-button">@BtnName</MudButton>
            }

           <br />

             </EditForm>
    </DialogContent>
 
</MudDialog>




    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public ReceiptViewModel OriginalReceiptViewModel { get; set; }


    [Parameter]
    public string BtnName { get; set; }

    string Icon = string.Empty;


    [Parameter]
    public List<Branch> Branches { get; set; }

    [Parameter]
    public List<SubProject> SubProjects { get; set; }

    public ReceiptViewModel ReceiptViewModel { get; set; }


    bool isCheckNumberCleared = false;

    bool isCheckDateCleared = false;

    bool isAccountNumberCleared = false;

    bool isBankNameCleared = false;



    protected override void OnParametersSet()
    {
        if (OriginalReceiptViewModel == null)
        {
            ReceiptViewModel = new ReceiptViewModel();


            // Set the default value for PaymentType
            ReceiptViewModel.PaymentType = PaymentType.Cash;



        }



        else
        {



            ReceiptViewModel = new ReceiptViewModel
                {
                    Id = OriginalReceiptViewModel.Id,
                    ReceivedFrom = OriginalReceiptViewModel.ReceivedFrom,
                    ReceivedBy = OriginalReceiptViewModel.ReceivedBy,
                    TotalAmount = OriginalReceiptViewModel.TotalAmount,
                    BranchId = OriginalReceiptViewModel.BranchId,
                    SubProjectId = OriginalReceiptViewModel.SubProjectId,
                    ForPurpose = OriginalReceiptViewModel.ForPurpose,
                    Date = OriginalReceiptViewModel.Date,
                    PaymentType=OriginalReceiptViewModel.PaymentType,

                    //PaymentType Related prop
                    CheckNumber = OriginalReceiptViewModel.CheckNumber,
                    CheckDate = OriginalReceiptViewModel.CheckDate,
                    AccountNumber = OriginalReceiptViewModel.AccountNumber,
                    Bank = OriginalReceiptViewModel.Bank,



            };


        }
    }




    async void Submit()
    {


        if (!string.IsNullOrWhiteSpace(ReceiptViewModel.ReceivedFrom))
        {


            Receipt receipt = new Receipt();


            receipt.ReceivedFrom = ReceiptViewModel.ReceivedFrom;
            receipt.ReceivedBy = ReceiptViewModel.ReceivedBy;
            receipt.TotalAmount = ReceiptViewModel.TotalAmount;
            receipt.BranchId = ReceiptViewModel.BranchId;
            receipt.SubProjectId = ReceiptViewModel.SubProjectId;
            receipt.ForPurpose = ReceiptViewModel.ForPurpose;
            receipt.Date = ReceiptViewModel.Date;
            receipt.PaymentType = ReceiptViewModel.PaymentType;


            switch (ReceiptViewModel.PaymentType)
            {
                case PaymentType.Check:
                    receipt.CheckNumber = ReceiptViewModel.CheckNumber;

                    // receipt.CheckDate = ReceiptViewModel.CheckDate.HasValue ? DateOnly.FromDateTime(ReceiptViewModel.CheckDate.Value) : receipt.CheckDate;

                    // إذا كان ReceiptViewModel.CheckDate ليس فارغًا null ، فقم بتحويله إلى DateOnly وتعيينه لـ receipt.CheckDate
                    // إذا كان ReceiptViewModel.CheckDate فارغًا null ، فاترك receipt.CheckDate كما هو
                    receipt.CheckDate = ReceiptViewModel.CheckDate.HasValue ? DateOnly.FromDateTime(ReceiptViewModel.CheckDate.Value) : receipt.CheckDate;


                    break;
                case PaymentType.Account:
                    receipt.AccountNumber = ReceiptViewModel.AccountNumber;
                    break;
                case PaymentType.Bank:
                    receipt.Bank = ReceiptViewModel.Bank;
                    break;

            }


            if (ReceiptViewModel.Id == 0)
            {


                // The branch has no ID, so it's a new branch
                await Http.PostAsJsonAsync("https://localhost:7210/api/Receipts/AddOneAsync", receipt);
                // Show a success message
                _Snackbar.Add("Branch added successfully!", Severity.Success);
            }
            else
            {
                receipt.Id = ReceiptViewModel.Id;
                await Http.PutAsJsonAsync("https://localhost:7210/api/Receipts", receipt);
                _Snackbar.Add("Branch updated successfully!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));
            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }



    void Cancel() => MudDialog.Cancel();

    
}




