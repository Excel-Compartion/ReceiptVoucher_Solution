@page "/Receipt"
@rendermode InteractiveAuto

@using System.Net.Http.Json
@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using ReceiptVoucher.Client.Services
@using System.Security.Claims
@using ReceiptVoucher.Core.Models

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IAuthService _IAuthservice
@inject IMapper _Mapper

<PageTitle>Makarim</PageTitle>

<style>
    :root {
        --color-custom: #3090C7;
    }

    .GetReceiptDtoTable {
        width: 100%;
        height: auto;
        margin-right: auto;
        margin-left: auto;
        overflow-x: auto;
    }

</style>

<br />
<!-- كود خاص بالطباعه في نفس الصفحه-->
@* <div style="position:absolute;margin-top:-1000000px;">
    <div id="printGetReceiptDto">
        <_PrintGetReceiptDtoPage RecId="RecId" />
    </div>
</div> *@


<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.ChromeReaderMode" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        السندات



    </span>

</p>

<MudTable Class="GetReceiptDtoTable" ServerData="@(new Func<TableState, Task<TableData<GetReceiptDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" >
    <ToolBarContent>
        @* <MudButton OnClick="OpenAddDialog" Class="btn "Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Style="background-color:var(--color-custom);color:white" Size="Size.Small" Label="اضافه" /> *@
        <MudButton Class="custom-btn" OnClick="OpenAddDialog" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Add" Title="add" />

            <span>إضافة</span>
        </MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="GetReceiptDto">رقم السند</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="GetReceiptDto">المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="GetReceiptDto">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="GetReceiptDto">اجمالي المبلغ</MudTableSortLabel></MudTh>

        @*  <MudTh><MudTableSortLabel SortLabel="receivedBy_field" T="GetReceiptDto">المستلم</MudTableSortLabel></MudTh> *@

        @if (UserBranchId == null)
        {
            <MudTh><MudTableSortLabel SortLabel="Branch_field" T="GetReceiptDto">المكتب</MudTableSortLabel></MudTh>
        }

        <MudTh><MudTableSortLabel SortLabel="SubProject_field" T="GetReceiptDto">المشروع الفرعي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Date_field" T="GetReceiptDto">التاريخ</MudTableSortLabel></MudTh>
        @*  <MudTh><MudTableSortLabel SortLabel="PaymentType_field" T="GetReceiptDto">نوع الدفع</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel T="GetReceiptDto">الاجراءت</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="رقم السند">
            @{
                string BranchNumWithReceiptNum = context.ReceiptBranchNumber + " - " + context.BranchNumber;
            }

            @BranchNumWithReceiptNum

        </MudTd>
        <MudTd DataLabel="المودع">@context.ReceivedFrom</MudTd>
        <MudTd DataLabel="الجهة المانحة">@context.GrantDestinations.GetDisplayName()</MudTd>
        <MudTd DataLabel="اجمالي المبلغ">@context.TotalAmount</MudTd>



        @if (UserBranchId == null)
        {
            <MudTd DataLabel="المكتب">@context.BranchName</MudTd>
        }


        <MudTd DataLabel="المشروع الفرعي">@context.SubProjectName</MudTd>
        <MudTd DataLabel="التاريخ">@context.Date</MudTd>
        @*  <MudTd DataLabel="نوع الدفع">@context.PaymentType.GetDisplayName()</MudTd> *@
        <MudTd DataLabel="الاجراءت">
            @* GetGetReceiptDtoRdcl *@

            <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
@*                 <MudButton Color="Color.Info" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => OpenEditDialog(context))" StartIcon="@Icons.Material.Outlined.Edit">تعديل</MudButton>
 *@                <MudButton Color="Color.Warning" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => OpenEditDialog(context, ButtonTypes.Details))" StartIcon="@Icons.Material.Outlined.AddRoad">تفاصيل</MudButton>


                <MudButton Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" @onclick="()=>PrintGetReceiptDto(context.Code)" StartIcon="@Icons.Material.Outlined.Print">طباعة</MudButton>


@*                 <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => DeleteGetReceiptDto(context.Id))" StartIcon="@Icons.Material.Outlined.DeleteOutline">حدف</MudButton>
 *@
            </MudButtonGroup>




        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText class="NotFound">@ResponseMessage</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText class="LodingNow">جاري التحميل ...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="رقم الصفحة" />
    </PagerContent>
</MudTable>


<br />





@code {
    public IEnumerable<GetReceiptDto>? pagedData;
    private MudTable<GetReceiptDto>? table;

    private int totalItems;
    private string? searchString;


    public List<BranchVMForDrowpDownSelect> Branches { get; set; } = new List<BranchVMForDrowpDownSelect>();
    public List<ProjectVMForDrowpDownSelect> Projects { get; set; } = new List<ProjectVMForDrowpDownSelect>();

    public List<SubProjectVMForDrowpDownSelect> SubProjects { get; set; } = new List<SubProjectVMForDrowpDownSelect>();


    public int RecId;

    public bool PrintActive = false;

    public string ResponseMessage = "لم يتم العثور على سجلات";


    public int? UserBranchId { get; set; }

    public UserViewModel currentUser { get; set; } = new();

    public string UserId { get; set; } = null!;



    string? role;

    void PrintGetReceiptDto(string code)
    {
        var url = $"RP/{code}";
        JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }





    // private async Task PrintGetReceiptDto(int GetReceiptDtoId)
    // {
    //     RecId = GetReceiptDtoId;
    //     PrintActive = true;

    //     await Task.Delay(500);

    //     await JSRuntime.InvokeVoidAsync("printJS", "printGetReceiptDto", "html");

    //     PrintActive = false;

    // }


    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await _IAuthservice.GetCurrentUserDetailsFromTokenAsync() ?? throw new Exception();

            if (currentUser != null)
            {
                UserBranchId = currentUser.BranchId;
                UserId = currentUser.Id;

                var roles = currentUser.Roles.ToList();

                role = roles[0];
            }
            else
            {
                // User is not authenticated, redirect to login
                NavigationManager.NavigateTo("/Login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<GetReceiptDto> data = new List<GetReceiptDto>();

    Pagination pagination { get; set; } = new Pagination();

    private async Task<TableData<GetReceiptDto>> ServerReload(TableState state)
    {

        try
        {
            // var response = await Http.GetFromJsonAsync<List<GetReceiptDto>>("api/Receipts/GetAllReceiptsWithGetDto");

            pagination.PageNumber = state.Page + 1;

            pagination.PageSize = state.PageSize;

            pagination.Search = searchString ?? "";

            pagination.NoPagination = true;



            var response = await Http.PostAsJsonAsync($"api/Receipts/GetAllReceiptsWithGetDto/{currentUser.BranchId??0}", pagination);


            BaseResponse<IEnumerable<GetReceiptDto>> content = await response.Content.ReadFromJsonAsync<BaseResponse<IEnumerable<GetReceiptDto>>>();




            if (content != null && content.Success)
            {
                if (currentUser != null)
                {

                    data = content.Data;

                }
            }
            else if (content != null)
            {

                ResponseMessage = content.Message;
            }


        }
        catch { ResponseMessage = "حدث خطاء اثناء تحميل البيانات"; }



        data = data.Where(GetReceiptDto =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (GetReceiptDto.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (GetReceiptDto.GrantDestinations.GetDisplayName().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{GetReceiptDto.Number}".Contains(searchString))
                return true;
            if ($"{GetReceiptDto.Mobile}".Contains(searchString))
                return true;
            if (GetReceiptDto.Date.ToString().Equals(searchString)) // إضافة البحث عن التاريخ
                return true;
            return false;
        }).ToArray();

        totalItems = data.Count();
        switch (state.SortLabel)
        {

            case "id_field":
                if (UserBranchId == null)
                {
                    data = data.OrderByDirection(state.SortDirection, o => o.Number);

                }
                else
                {
                    data = data.OrderByDirection(state.SortDirection, o => o.ReceiptBranchNumber);
                }
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedFrom);
                break;

            case "receivedFrom_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedFrom);
                break;

            case "grantDestinations_field":
                data = data.OrderByDirection(state.SortDirection, o => o.GrantDestinations.GetDisplayName());
                break;

            case "totalAmount_field":
                data = data.OrderByDirection(state.SortDirection, o => o.TotalAmount);
                break;

            case "Branch_field":
                data = data.OrderByDirection(state.SortDirection, o => o.BranchName);
                break;

            case "SubProject_field":
                data = data.OrderByDirection(state.SortDirection, o => o.SubProjectName);
                break;

            case "Date_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Date);
                break;

            case "PaymentType_field":
                data = data.OrderByDirection(state.SortDirection, o => o.PaymentType.GetDisplayName());
                break;

            case "receivedBy_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedBy);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<GetReceiptDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;

        if (table != null) { table.ReloadServerData(); }

    }
}



@code {



    //<!--==================     Add / Edit Dialog      =========================================-->

    private async Task OpenAddDialog()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<BranchVMForDrowpDownSelect>>("api/Branches/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<ProjectVMForDrowpDownSelect>>("api/Projects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProjectVMForDrowpDownSelect>>("api/SubProjects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }

        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        parameters.Add("BtnName", "اضافه");

        parameters.Add("Branches", Branches);

        parameters.Add("Projects", Projects);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("UserBranchId", UserBranchId);

        parameters.Add("UserId", UserId);

        var options = new DialogOptions() { CloseButton = true };
        _DialogService.Show<_Receipt_Add_Dialog>("اضافة سند جديد", parameters, options);
    }

    private async Task OpenEditDialog(GetReceiptDto GetReceiptDto, string optionalParameter = "")
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<BranchVMForDrowpDownSelect>>("api/Branches/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<ProjectVMForDrowpDownSelect>>("api/Projects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProjectVMForDrowpDownSelect>>("api/SubProjects/GetAllForDrowpDownSelectAsync");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }


        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));



        ReceiptViewModel receiptViewModel = _Mapper.Map<ReceiptViewModel>(GetReceiptDto);

        string ReceivedBy = "";
        string ReceivedByName = "";
        try
        {

            var UserName = _UserManager.Users.Where(x => x.Id == GetReceiptDto.ReceivedBy).FirstOrDefault();
            if (UserName != null)
            {
                ReceivedByName = UserName.FirstName + " " + UserName.LastName;
                ReceivedBy = UserName.Id;
            }


        }
        catch { }


        receiptViewModel.ReceivedBy=ReceivedBy;

        receiptViewModel.ReceivedByName = ReceivedByName;



        parameters.Add("OriginalReceiptViewModel", receiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("Projects", Projects);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("UserBranchId", UserBranchId);
        parameters.Add("UserId", UserId);

        var options = new DialogOptions() { CloseButton = true };

        if (optionalParameter == ButtonTypes.Details)
        {

            parameters.Add("BtnName", ButtonTypes.Details);
            _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);
        }

        else
        {
            parameters.Add("BtnName", "تعديل");
            _DialogService.Show<_Receipt_Add_Dialog>("تعديل السند", parameters, options);
        }


    }






    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            // Reload the table data
            if (table != null) { await table.ReloadServerData(); }
        }
    }




    private async Task DeleteGetReceiptDto(int GetReceiptDtoId)
    {
        GetReceiptDto? selectedGetReceiptDto = data.SingleOrDefault(b => b.Id == GetReceiptDtoId);

        if (selectedGetReceiptDto != null)
        {
            var parameters = new DialogParameters() { { "GetReceiptDtoId", selectedGetReceiptDto.Number } };
            var dialog = _DialogService.Show<_ReceiptConfirmDeleteDialog>("الرجاء التأكيد", parameters);

            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch using the API controller
                var response = await Http.DeleteAsync($"api/GetReceiptDtos/{GetReceiptDtoId}");

                if (response.IsSuccessStatusCode)
                {
                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات السند بنجاح", Severity.Success);

                    // Reload the table data
                    if (table != null) { await table.ReloadServerData(); }
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("حدث خطاء اثناء حذف بيانات السند!", Severity.Error);
                }

                StateHasChanged();
            }
        }
    }



}


