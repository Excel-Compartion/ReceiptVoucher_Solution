@page "/Receipt"
@rendermode InteractiveAuto

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Identity
@using ReceiptVoucher.Client.Services
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IAuthService _IAuthservice

<PageTitle>Makarim</PageTitle>

<style>
    :root {
        --color-custom: #3090C7;
    }

    .ReceiptTable {
        width: 100%;
        height: auto;
        margin-right: auto;
        margin-left: auto;
        overflow-x: auto;
    }

</style>

<br />
<!-- كود خاص بالطباعه في نفس الصفحه-->
@* <div style="position:absolute;margin-top:-1000000px;">
    <div id="printReceipt">
        <_PrintReceiptPage RecId="RecId" />
    </div>
</div> *@


<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.ChromeReaderMode" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        السندات



    </span>

</p>

<MudTable Class="ReceiptTable" ServerData="@(new Func<TableState, Task<TableData<Receipt>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        @* <MudButton OnClick="OpenAddDialog" Class="btn "Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Style="background-color:var(--color-custom);color:white" Size="Size.Small" Label="اضافه" /> *@
        <MudButton Class="custom-btn" OnClick="OpenAddDialog" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Add" Title="add" />

            <span>إضافة</span>
        </MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">رقم السند</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="Receipt">المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="Receipt">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="totalAmount_field" T="Receipt">اجمالي المبلغ</MudTableSortLabel></MudTh>

       @*  <MudTh><MudTableSortLabel SortLabel="receivedBy_field" T="Receipt">المستلم</MudTableSortLabel></MudTh> *@

        @if (UserBranchId == null)
        {
            <MudTh><MudTableSortLabel SortLabel="Branch_field" T="Receipt">المركز</MudTableSortLabel></MudTh>
        }

        <MudTh><MudTableSortLabel SortLabel="SubProject_field" T="Receipt">المشروع الفرعي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Date_field" T="Receipt">التاريخ</MudTableSortLabel></MudTh>
       @*  <MudTh><MudTableSortLabel SortLabel="PaymentType_field" T="Receipt">نوع الدفع</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel T="Receipt">الاجراءت</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="رقم السند">@context.Number</MudTd>
            <MudTd DataLabel="المودع">@context.ReceivedFrom</MudTd>
            <MudTd DataLabel="الجهة المانحة">@context.GrantDestinations.GetDisplayName()</MudTd>
            <MudTd DataLabel="اجمالي المبلغ">@context.TotalAmount</MudTd>

         @*    <MudTd DataLabel="المستلم">


                @{
                string ReceivedBy = "";
                try
                {

                    var UserName = _UserManager.Users.Where(x => x.Id == context.ReceivedBy).FirstOrDefault();
                    if (UserName != null)
                    {
                        ReceivedBy = UserName.FirstName + " " + UserName.LastName;
                    }

                }
                catch { }
            }

            @ReceivedBy

        </MudTd> *@

        @if (UserBranchId == null)
        {
            <MudTd DataLabel="المركز">@context.Branch.Name</MudTd>
        }


        <MudTd DataLabel="المشروع الفرعي">@context.SubProject.Name</MudTd>
            <MudTd DataLabel="التاريخ">@context.Date</MudTd>
           @*  <MudTd DataLabel="نوع الدفع">@context.PaymentType.GetDisplayName()</MudTd> *@
            <MudTd DataLabel="الاجراءت">
                @* GetReceiptRdcl *@

                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Info" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => OpenEditDialog(context))" StartIcon="@Icons.Material.Outlined.Edit">تعديل</MudButton>
                    <MudButton Color="Color.Warning" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => OpenEditDialog(context, ButtonTypes.Details))" StartIcon="@Icons.Material.Outlined.AddRoad">تفاصيل</MudButton>

  
                    <MudButton Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" @onclick="()=>PrintReceipt(context.Code)" StartIcon="@Icons.Material.Outlined.Print">طباعة</MudButton>


                <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => DeleteReceipt(context.Id))" StartIcon="@Icons.Material.Outlined.DeleteOutline">حدف</MudButton>

                </MudButtonGroup>




            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText class="NotFound">@ResponseMessage</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText class="LodingNow">جاري التحميل ...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


    <br />





    @code {
    public IEnumerable<Receipt>? pagedData;
    private MudTable<Receipt>? table;

    private int totalItems;
    private string? searchString;


    public List<Branch> Branches { get; set; } = new List<Branch>();
    public List<Project> Projects { get; set; } = new List<Project>();

    public List<SubProject> SubProjects { get; set; } = new List<SubProject>();


    public int RecId;

    public bool PrintActive = false;

    public string ResponseMessage = "لم يتم العثور على سجلات";


    public int? UserBranchId { get; set; }

    public UserViewModel currentUser { get; set; } = new();

    public string UserId { get; set; } = null!;



    string? role;

    void PrintReceipt(string code)
    {
        var url = $"ReceiptPrints/{code}";
        JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }





    // private async Task PrintReceipt(int ReceiptId)
    // {
    //     RecId = ReceiptId;
    //     PrintActive = true;

    //     await Task.Delay(500);

    //     await JSRuntime.InvokeVoidAsync("printJS", "printReceipt", "html");

    //     PrintActive = false;

    // }



    protected override async Task OnInitializedAsync()
    {

        currentUser = await _IAuthservice.GetCurrentUserDetailsAsync();

        if (currentUser != null)
        {
            UserBranchId = currentUser.BranchId;
            UserId = currentUser.Id;

            var roles = currentUser.Roles.ToList();

            role = roles[0];
        }



     


        try
        {
            var response = await Http.GetFromJsonAsync<List<Branch>>("api/Branches/GetAllAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<Project>>("api/Projects/GetAllAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProject>>("api/SubProjects/Get");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }


    }

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<Receipt> data = new List<Receipt>();

    private async Task<TableData<Receipt>> ServerReload(TableState state)
    {

        try
        {
            var response = await Http.GetFromJsonAsync<List<Receipt>>("api/Receipts/GetAllAsync");

            if (response != null)
            {

                if (currentUser!=null  )
                {
                    
                    if (role!=null && role!= RolesNames.Admin)
                    {
                        data = response
      .Where(x => x.BranchId == currentUser.BranchId)
      .OrderByDescending(x => x.Date)
      .ToList();

                    }
                    
                    else
                    {
                        data = response.OrderByDescending(x => x.Date);
                    }
                }
               
               
            }


        }
        catch { ResponseMessage = "حدث خطاء اثناء تحميل البيانات"; }



        data = data.Where(receipt =>
     {
         if (string.IsNullOrWhiteSpace(searchString))
             return true;
         if (receipt.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
             return true;
         if ($"{receipt.Id}".Contains(searchString))
             return true;
         if (receipt.Date.ToString().Equals(searchString)) // إضافة البحث عن التاريخ
             return true;
         return false;
     }).ToArray();

        totalItems = data.Count();
        switch (state.SortLabel)
        {

            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedFrom);
                break;

            case "receivedFrom_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedFrom);
                break;

            case "grantDestinations_field":
                data = data.OrderByDirection(state.SortDirection, o => o.GrantDestinations.GetDisplayName());
                break;

            case "totalAmount_field":
                data = data.OrderByDirection(state.SortDirection, o => o.TotalAmount);
                break;

            case "Branch_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Branch.Name);
                break;

            case "SubProject_field":
                data = data.OrderByDirection(state.SortDirection, o => o.SubProject.Name);
                break;

            case "Date_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Date);
                break;

            case "PaymentType_field":
                data = data.OrderByDirection(state.SortDirection, o => o.PaymentType.GetDisplayName());
                break;

            case "receivedBy_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedBy);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Receipt>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;

        if (table != null) { table.ReloadServerData(); }

    }
}



    @code {



    //<!--==================     Add / Edit Dialog      =========================================-->

    private void OpenAddDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        parameters.Add("BtnName", "اضافه");

        parameters.Add("Branches", Branches);

        parameters.Add("Projects", Projects);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("UserBranchId", UserBranchId);

        parameters.Add("UserId", UserId);

        var options = new DialogOptions() { CloseButton = true };
        _DialogService.Show<_Receipt_Add_Dialog>("اضافة سند جديد", parameters, options);
    }

    private void OpenEditDialog(Receipt receipt, string optionalParameter = "")
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        ReceiptViewModel receiptViewModel = new ReceiptViewModel();

        receiptViewModel.Id = receipt.Id;
        receiptViewModel.ReceivedFrom = receipt.ReceivedFrom;
        receiptViewModel.TotalAmount = receipt.TotalAmount;
        receiptViewModel.BranchId = receipt.BranchId;
        receiptViewModel.ProjectId = receipt.ProjectId;
        receiptViewModel.SubProjectId = receipt.SubProjectId;
        receiptViewModel.ForPurpose = receipt.ForPurpose;
        receiptViewModel.Date = receipt.Date;
        receiptViewModel.PaymentType = receipt.PaymentType;
        receiptViewModel.CheckNumber = receipt.CheckNumber;
        receiptViewModel.GrantDestinations = receipt.GrantDestinations;
        receiptViewModel.Gender = receipt.Gender;
        receiptViewModel.Age = receipt.Age;
        receiptViewModel.Mobile = receipt.Mobile;
        receiptViewModel.ProjectId = receipt.ProjectId;

        string ReceivedBy = "";
        try
        {

            var UserName = _UserManager.Users.Where(x => x.Id == receipt.ReceivedBy).FirstOrDefault();
            if (UserName != null)
            {
                ReceivedBy = UserName.FirstName + " " + UserName.LastName;
            }

            
        }
        catch { }
    
        receiptViewModel.ReceivedBy = ReceivedBy;


        // التحقق من القيمة قبل التحويل
        DateTime? dateTime = receipt.CheckDate.HasValue ? receipt.CheckDate.Value.ToDateTime(TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)) : (DateTime?)null;

        // تعيين القيمة في ViewModel
        receiptViewModel.CheckDate = dateTime;



        receiptViewModel.AccountNumber = receipt.AccountNumber;
        receiptViewModel.Bank = receipt.Bank;



        parameters.Add("OriginalReceiptViewModel", receiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("Projects", Projects);

        parameters.Add("SubProjects", SubProjects);

        parameters.Add("UserBranchId", UserBranchId);
        parameters.Add("UserId", UserId);

        var options = new DialogOptions() { CloseButton = true };

        if (optionalParameter == ButtonTypes.Details)
        {

            parameters.Add("BtnName", ButtonTypes.Details);
            _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);
        }

        else
        {
            parameters.Add("BtnName", "تعديل");
            _DialogService.Show<_Receipt_Add_Dialog>("تعديل السند", parameters, options);
        }


    }






    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            // Reload the table data
            if (table != null) { await table.ReloadServerData(); }
        }
    }




    private async Task DeleteReceipt(int receiptId)
    {
        Receipt? selectedReceipt = data.SingleOrDefault(b => b.Id == receiptId);

        if (selectedReceipt != null)
        {
            var parameters = new DialogParameters() { { "ReceiptId", selectedReceipt.Id } };
            var dialog = _DialogService.Show<_ReceiptConfirmDeleteDialog>("الرجاء التأكيد", parameters);

            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch using the API controller
                var response = await Http.DeleteAsync($"api/Receipts/{receiptId}");

                if (response.IsSuccessStatusCode)
                {
                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات السند بنجاح", Severity.Success);

                    // Reload the table data
                    if (table != null) { await table.ReloadServerData(); }
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("حدث خطاء اثناء حذف بيانات السند!", Severity.Error);
                }

                StateHasChanged();
            }
        }
    }



}


