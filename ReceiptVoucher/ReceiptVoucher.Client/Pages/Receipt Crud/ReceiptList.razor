@page "/Receipt"
@rendermode InteractiveAuto

@inject HttpClient Http

@inject IDialogService _DialogService
@inject ISnackbar _Snackbar

<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<Receipt>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>

        <MudButton OnClick="OpenAddDialog" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary">اضافة سند</MudButton>

        &nbsp;&nbsp;

        <MudText Typo="Typo.h6">Receipt</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">اسم المودع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">جهه المنح</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">الجوال</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">اسم المحاسب</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">اجمالي المبلغ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">الفرع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id_field" T="Receipt">المشروع الفردي</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">الغرض</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">التاريخ</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">نوع الدفع</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Receipt">الاجراءت</MudTableSortLabel></MudTh>




    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.ReceivedFrom</MudTd>
            <MudTd DataLabel="Name">@context.GrantDestinations.GetDisplayName()</MudTd>
            <MudTd DataLabel="Name">@context.Mobile</MudTd>
            <MudTd DataLabel="ReceivedBy">@context.ReceivedBy</MudTd>
            <MudTd DataLabel="TotalAmount">@context.TotalAmount</MudTd>
            <MudTd DataLabel="BranchId">@context.Branch.Name</MudTd>
            <MudTd DataLabel="SubProjectId">@context.SubProject.Name</MudTd>
            <MudTd DataLabel="ForPurpose">@context.ForPurpose</MudTd>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="PaymentType">@context.PaymentType</MudTd>




            <MudTd DataLabel="Actions">


                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" @onclick="@(() => OpenEditDialog(context))">تعديل</MudButton>
                    <MudButton Color="Color.Warning" Variant="Variant.Outlined" @onclick="@(() => OpenEditDialog(context, ButtonTypes.Details))">تفاصيل</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="@(() => DeleteReceipt(context.Id))">حدف</MudButton>
                </MudButtonGroup>





            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>




    @code {
    public IEnumerable<Receipt> pagedData;
    private MudTable<Receipt> table;

    private int totalItems;
    private string searchString = null;


    public List<Branch> Branches { get; set; }
    public List<SubProject> SubProjects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Branches = await Http.GetFromJsonAsync<List<Branch>>("https://localhost:7210/api/Branches/GetAllAsync");

        SubProjects = await Http.GetFromJsonAsync<List<SubProject>>("https://localhost:7210/api/SubProjects/Get");
    }

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<Receipt> data = new List<Receipt>();

    private async Task<TableData<Receipt>> ServerReload(TableState state)
    {
        data = await Http.GetFromJsonAsync<List<Receipt>>("https://localhost:7210/api/Receipts/GetAllAsync");

        data = data.Where(receipt =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (receipt.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{receipt.Id}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ReceivedFrom);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Receipt>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}



    @code {



    //<!--==================     Add / Edit Dialog      =========================================-->

    private void OpenAddDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        parameters.Add("BtnName", "اضافه");

        parameters.Add("Branches", Branches);

        parameters.Add("SubProjects", SubProjects);

        var options = new DialogOptions() { CloseButton = true };
        _DialogService.Show<_Receipt_Add_Dialog>("اضافة سند جديد", parameters, options);
    }

    private void OpenEditDialog(Receipt receipt, string optionalParameter = "")
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        ReceiptViewModel receiptViewModel = new ReceiptViewModel();

        receiptViewModel.Id = receipt.Id;
        receiptViewModel.ReceivedFrom = receipt.ReceivedFrom;
        receiptViewModel.ReceivedBy = receipt.ReceivedBy;
        receiptViewModel.TotalAmount = receipt.TotalAmount;
        receiptViewModel.BranchId = receipt.BranchId;
        receiptViewModel.SubProjectId = receipt.SubProjectId;
        receiptViewModel.ForPurpose = receipt.ForPurpose;
        receiptViewModel.Date = receipt.Date;
        receiptViewModel.PaymentType = receipt.PaymentType;
        receiptViewModel.CheckNumber = receipt.CheckNumber;

        receiptViewModel.GrantDestinations = receipt.GrantDestinations;
        receiptViewModel.Gender = receipt.Gender;
        receiptViewModel.Age = receipt.Age;
        receiptViewModel.Mobile = receipt.Mobile;



        // التحقق من القيمة قبل التحويل
        DateTime? dateTime = receipt.CheckDate.HasValue ? receipt.CheckDate.Value.ToDateTime(TimeOnly.FromTimeSpan(DateTime.Now.TimeOfDay)) : (DateTime?)null;

        // تعيين القيمة في ViewModel
        receiptViewModel.CheckDate = dateTime;



        receiptViewModel.AccountNumber = receipt.AccountNumber;
        receiptViewModel.Bank = receipt.Bank;



        parameters.Add("OriginalReceiptViewModel", receiptViewModel);


        parameters.Add("Branches", Branches);

        parameters.Add("SubProjects", SubProjects);

        var options = new DialogOptions() { CloseButton = true };

        if (optionalParameter == ButtonTypes.Details)
        {

            parameters.Add("BtnName", ButtonTypes.Details);
            _DialogService.Show<_Receipt_Add_Dialog>("تفاصيل السند", parameters, options);
        }

        else
        {
            parameters.Add("BtnName", "تعديل");
            _DialogService.Show<_Receipt_Add_Dialog>("تعديل السند", parameters, options);
        }


    }








    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            // Reload the table data
            table.ReloadServerData();
        }
    }




    private async Task DeleteReceipt(int receiptId)
    {
        Receipt? selectedReceipt = data.SingleOrDefault(b => b.Id == receiptId);

        if (selectedReceipt != null)
        {
            var parameters = new DialogParameters() { { "ReceiptId", selectedReceipt.Id } };
            var dialog = _DialogService.Show<_ReceiptConfirmDeleteDialog>("الرجاء التأكيد", parameters);

            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch using the API controller
                var response = await Http.DeleteAsync($"https://localhost:7210/api/Receipts/{receiptId}");

                if (response.IsSuccessStatusCode)
                {
                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات السند بنجاح", Severity.Success);

                    // Reload the table data
                    table.ReloadServerData();
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("حدث خطاء اثناء حذف بيانات السند!", Severity.Error);
                }

                StateHasChanged();
            }
        }
    }



}


