        @page "/DonorCorrespondences"
@rendermode InteractiveAuto
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Identity
@using ReceiptVoucher.Client.Services
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService _IAuthservice


<PageTitle>Makarim</PageTitle>

<style>


    :root {
        --color-custom: #3090C7;
    }

    .date-picker-color {
        background-color: #DBE9FA;
    }

</style>
<br />

<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">

    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.SupervisorAccount" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        مراسله المانحين




    </span>

</p>

<div class="containerContent" style="border: 1px solid gainsboro;border-radius:3px;padding:1%">



    <MudRadioGroup @bind-Value="RadioDateType">
        <MudRadio class="Day" Value="Day" Color="Color.Info" Size="Size.Small">تقرير يومي</MudRadio>
        <MudRadio class="Month" Value="Month" Color="Color.Warning" Size="Size.Small">تقرير عام</MudRadio>
    </MudRadioGroup>






    <MudGrid>
        <MudItem xs="12" sm="6">

            <!--Project Select-->
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الرئيسية" MultiSelection="true" @bind-SelectedValues="SelectProject" ValueChanged="UnCheckedChange">

                @if (Projects != null)
                {
                    @foreach (var project in Projects)
                    {
                        <MudSelectItem T="string" Value="@project.Name">@project.Name</MudSelectItem>
                    }
                }

            </MudSelect>
        </MudItem>


        @{
            if (SelectProject.Count() == 0 && SelectSubProject.Count() != 0)
            {
                UnCheckedChange();
            }
        }

        <MudItem xs="12" sm="6">

            <!--SubProject Select-->
            <MudSelect T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="المشاريع الفرعية" MultiSelection="true" @bind-SelectedValues="SelectSubProject">

                @if (SubProjects != null)
                {
                    if (isUnChecked)
                    {
                        // تهيئة القائمة المتعددة التي تم اختيارها
                        SelectSubProject = SelectSubProjectList;
                        isUnChecked = false;
                        StateHasChanged(); // إعادة تقديم العنصر


                    }

                    @foreach (var subProjects in SubProjects)
                    {
                        if (SelectProject.Count() != 0)
                        {
                            if (SelectProject.Contains(subProjects.Project.Name))
                            {
                                <MudSelectItem T="string" Value="@subProjects.Name">@subProjects.Name</MudSelectItem>
                            }
                        }

                    }
                }

            </MudSelect>

        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="الجهات المانحة" MultiSelection="true" @bind-SelectedValues="SelectGrantDestinations">

                <MudSelectItem T="string" Value="@GrantDest.Individual.GetDisplayName()">@GrantDest.Individual.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Association.GetDisplayName()">@GrantDest.Association.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Company.GetDisplayName()">@GrantDest.Company.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@GrantDest.Foundation.GetDisplayName()">@GrantDest.Foundation.GetDisplayName()</MudSelectItem>

            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect Style="width:100%" T="string" SelectAll="true" SelectAllText="اختيار الكل" Label="انواع الدفع" MultiSelection="true" @bind-SelectedValues="SelectPaymentTypes">

                <MudSelectItem T="string" Value="@PaymentTypes.Cash.GetDisplayName()">@PaymentTypes.Cash.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Check.GetDisplayName()">@PaymentTypes.Check.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Bank.GetDisplayName()">@PaymentTypes.Bank.GetDisplayName()</MudSelectItem>
                <MudSelectItem T="string" Value="@PaymentTypes.Account.GetDisplayName()">@PaymentTypes.Account.GetDisplayName()</MudSelectItem>

            </MudSelect>
        </MudItem>


    </MudGrid>



    @{
        if (UserBranchId == null)
        {
            <MudSelect SelectAll="true" SelectAllText="اختيار الكل" Style="width:100%" T="string" Label="المكاتب" MultiSelection="true" @bind-SelectedValues="SelectBranchId">

               
                        @foreach (var branch in Branches)
                        {
                            <MudSelectItem T="string" Value="@branch.Name">@branch.Name</MudSelectItem>
                        }
               

            </MudSelect>
        }
    }

   

    <br />

    @if (RadioDateType == Day)
    {
        <MudDatePicker Class="date-picker-color" Color="Color.Info" @bind-Date="selectedDate" Label="تاريخ السند" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />


    }
    else
    {

        <MudGrid>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth1" Label="من التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker Class="date-picker-color" Color="Color.Info" Style="width: 100%;" @bind-Date="selectedMonth2" Label="الى التاريخ" OpenTo="OpenTo.Month" Variant="Variant.Filled" Formated="true" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
        </MudGrid>





    }



</div>
<br />

<MudTextField T="string" Label="نص الرساله" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" @bind-Value="Message" AdornmentColor="Color.Success" Lines="3" />


<br />

<MudTable MultiSelection="true" T="GrantDestination_VM" SelectedItemsChanged="OnSelectedItemsChanged" ServerData="@(new Func<TableState, Task<TableData<GrantDestination_VM>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton Class="custom-btn" OnClick="SendFilterData" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Streetview" Title="add" />
            <span>عرض الجهات المانحة</span>
        </MudButton>


        &nbsp;
        &nbsp;

        <MudButton Class="custom-btn" OnClick="SendSMSMessage" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Send" Title="add" />
            <span> ارسال رساله</span>
        </MudButton>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh><MudTableSortLabel SortLabel="receivedFrom_field" T="GrantDestination_VM">الاسم</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="grantDestinations_field" T="GrantDestination_VM">نوع الجهة المانحة</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="mobile_field" T="GrantDestination_VM">رقم الجوال</MudTableSortLabel></MudTh>



    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="الاسم">@context.ReceivedFrom</MudTd>
        <MudTd DataLabel="نوع الجهة المانحة">@context.GrantDestinationName</MudTd>
        <MudTd DataLabel="رقم الجوال">@context.Mobile</MudTd>




    </RowTemplate>
    <NoRecordsContent>

        <MudText class="NotFound">@ResponseMessage</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText class="LodingNow">جاري التحميل...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="رقم الصفحة" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan="5">الصفوف المحدده @selectedItemsList.Count()</MudTd>
    </FooterContent>
</MudTable>

@{



}




@code {
    private MudTable<GrantDestination_VM>? table;
    private string? searchString;
    private DateTime? selectedDate = DateTime.Now;
    private DateTime? selectedMonth1 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime? selectedMonth2 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));

    private string RadioDateType = null!;
    private string Day = "Day";
    private string Month = "Month";

    public string ResponseMessage = "لم يتم العثور على سجلات";



    public List<Branch> Branches { get; set; } = new List<Branch>();

    // SubProject Select
    private List<SubProject> SubProjects { get; set; } = new List<SubProject>();

    private IEnumerable<string> SelectSubProject { get; set; } = new List<string>();


    private List<Project> Projects { get; set; } = new List<Project>();

    private IEnumerable<string> SelectProject { get; set; } = new List<string>();

    private IEnumerable<string> SelectBranchId { get; set; } = new List<string>();

    private IEnumerable<string> SelectPaymentTypes { get; set; } = new List<string>();

    private IEnumerable<string> SelectGrantDestinations { get; set; } = new List<string>();

    private bool subProjectClose = false;

    private int SelectProjectCount;

    private bool isUnChecked = false;

    private List<string> SelectSubProjectList = new List<string>();

    public int? UserBranchId { get; set; }

    private HashSet<GrantDestination_VM> selectedItems1 = new HashSet<GrantDestination_VM>();

    public string Message { get; set; } = string.Empty;

    // تعريف القائمة
    private List<GrantDestination_VM> selectedItemsList = new List<GrantDestination_VM>();

    public UserViewModel currentUser { get; set; } = new();


    void UnCheckedChange()
    {
        if (SelectProjectCount > SelectProject.Count())
        {
            isUnChecked = true;

            SelectProjectCount = SelectProject.Count();

            if (SelectSubProject.Count() != 0 && SelectProject.Count() != 0)
            {
                foreach (var selectSubProject in SelectSubProject)
                {
                    var SubProject = SubProjects.Where(x => x.Name == selectSubProject).FirstOrDefault();

                    if (SelectProject.Contains(SubProject.Project.Name))
                    {
                        SelectSubProjectList.Add(SubProject.Name);
                    }

                }


                SelectSubProject = SelectSubProjectList;

            }
            else
            {
                SelectSubProjectList = new List<string>();
            }

        }

        else
        {
            SelectProjectCount = SelectProject.Count();
        }

    }


    private void OnSelectedItemsChanged(HashSet<GrantDestination_VM> elements)
    {
        // if (elements.Any())
        //     elements.First().Mobile = "Changed";

        selectedItemsList = elements.ToList();
    }




    public ApplicationUser ApplicationUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {


        //-------------------------

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user != null)
        {
            var userId = user.FindFirstValue("uid");


            ApplicationUser = await _UserManager.Users.Include(user => user.Branch).SingleOrDefaultAsync(u => u.Id == userId);
        }

        UserBranchId = ApplicationUser.BranchId;

        //-------------------------
        RadioDateType = Day;






        try
        {
            var response = await Http.GetFromJsonAsync<List<Branch>>("api/Branches/GetAllAsync");

            if (response != null)
            {
                Branches = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<SubProject>>("api/SubProjects/Get");

            if (response != null)
            {
                SubProjects = response;
            }


        }
        catch { }

        try
        {
            var response = await Http.GetFromJsonAsync<List<Project>>("api/Projects/GetAllAsync");

            if (response != null)
            {
                Projects = response;
            }


        }
        catch { }


        await SendFilterData();


    }




    private void UpdateTable()
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
    }

    private bool CheckProjectSelect(int ProjectId)
    {
        bool _bool = false;
        var project = Projects.Where(x => x.Id == ProjectId).FirstOrDefault();

        if (project != null)
        {
            if (SelectProject.Contains(project.Name))
            {
                _bool = true;
            }
        }


        return _bool;
    }



    private FilterData filterData = new FilterData();



    private List<GrantDestination_VM> data = new List<GrantDestination_VM>();

    private async Task SendFilterData()
    {




        // جمع بيانات الفلترة
        filterData.RadioDateType = RadioDateType;



        filterData.SelectedDate = DateOnly.FromDateTime(selectedDate.Value);
        filterData.SelectedMonth1 = DateOnly.FromDateTime(selectedMonth1.Value);
        filterData.SelectedMonth2 = DateOnly.FromDateTime(selectedMonth2.Value);
        filterData.SelectProject = SelectProject.ToList();
        filterData.SelectSubProject = SelectSubProject.ToList();
        filterData.SelectBranchId = SelectBranchId.ToList();
        filterData.SelectBranchId = SelectBranchId.ToList();
        filterData.SelectGrantDestinations = SelectGrantDestinations.ToList();
        filterData.SelectPaymentTypes = SelectPaymentTypes.ToList();
        filterData.UserBranchId = UserBranchId;


        bool IsFilter = filterData.SelectGrantDestinations.Count > 0
       || filterData.SelectPaymentTypes.Count > 0
       || filterData.SelectProject.Count > 0
       || filterData.SelectSubProject.Count > 0
       || filterData.SelectBranchId.Count > 0 ;




        bool IsFilterItemsAllSelected = filterData.SelectGrantDestinations.Count > 0
      && filterData.SelectPaymentTypes.Count > 0
      && filterData.SelectProject.Count > 0
      && filterData.SelectSubProject.Count > 0
      && (filterData.SelectBranchId.Count > 0 || UserBranchId != null);



        if (((IsFilter == false && IsFilterItemsAllSelected == false) || IsFilterItemsAllSelected) || (IsFilter==false && UserBranchId!=null))
        {



            // إرسال البيانات إلى واجهة برمجة التطبيقات
            var response = await Http.PostAsJsonAsync("api/Receipts/GetDonorCorrespondenceWithFilteredData", filterData);

            // التحقق من الاستجابة
            if (response.IsSuccessStatusCode)
            {

                try
                {
                    // تحويل البيانات المرتجعة إلى قائمة الإيصالات
                    var GrantDestination_VMs = await response.Content.ReadFromJsonAsync<List<GrantDestination_VM>>();


                    if (GrantDestination_VMs != null) { data = GrantDestination_VMs; }

                    if (table != null) { await table.ReloadServerData(); }

                }
                catch { }


            }
        }


        else
        {
            _Snackbar.Add($"قم بتحديد عناصر الفلترة", Severity.Error);
        }

    }


    async void SendSMSMessage()
    {
        if (selectedItemsList.Count() > 0 && Message!=string.Empty)
        {
            BaseResponse<List<GrantDestination_VM>> GrantDestinationsWithMessage = new BaseResponse<List<GrantDestination_VM>>(data: selectedItemsList, message: Message);

            var response = await Http.PostAsJsonAsync("api/SMSMessage/SendSMSMessageToGrantDestinations", GrantDestinationsWithMessage);

            BaseResponse<string> content = await response.Content.ReadFromJsonAsync<BaseResponse<string>>();

            if (content.Success)
            {

                _Snackbar.Add(content.Message, Severity.Success);



            }
            else
            {
                try
                {
                    _Snackbar.Add($"{content.Message} \n {content.Data} ", Severity.Error, confg => { confg.VisibleStateDuration = 100000000; });


                }
                catch
                {

                    _Snackbar.Add($"حدث خطاء تاكد من الاتصال بالانترنت", Severity.Error);
                }


            }
        }

        else
        {
            if (selectedItemsList.Count() == 0)
            {
                _Snackbar.Add($"قم بتحديد جهات المنح اولا", Severity.Error);
            }
            else
            {
                _Snackbar.Add($"قم باضافة نص للرساله", Severity.Error);
            }

        }

    }



    private async Task<TableData<GrantDestination_VM>> ServerReload(TableState state)
    {



        data = data.Where(GrantDest =>
      {
          if (string.IsNullOrWhiteSpace(searchString))
              return true;
          if (GrantDest.ReceivedFrom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
              return true;
          if ($"{GrantDest.Mobile}".Contains(searchString))
              return true;
          if (GrantDest.GrantDestinationName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
          {
              return true;
          }
          return false;

      }).ToList();





        int totalItems = data.Count();

        switch (state.SortLabel)
        {

            case "receivedFrom_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.ReceivedFrom).ToList() : data.OrderByDescending(r => r.ReceivedFrom).ToList();
                break;

            case "mobile_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.Mobile).ToList() : data.OrderByDescending(r => r.Mobile).ToList();
                break;

            case "grantDestinations_field":
                data = state.SortDirection == SortDirection.Ascending ? data.OrderBy(r => r.GrantDestinationName).ToList() : data.OrderByDescending(r => r.GrantDestinationName).ToList();
                break;


        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        return new TableData<GrantDestination_VM>() { TotalItems = totalItems, Items = pagedData };
    }


    private void OnSearch(string text)
    {
        searchString = text;
        if (table != null) { table.ReloadServerData(); }

    }


}