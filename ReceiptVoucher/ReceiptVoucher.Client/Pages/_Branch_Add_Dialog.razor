@* @inject IUnitOfWork _IUnitOfWork *@
@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http


<MudDialog Class="custom-modal">
    <DialogContent>
        <EditForm Model="@Branch" Class="custom-form" >
            <DataAnnotationsValidator />
            <MudTextField Immediate="true" @bind-Value="@Branch.Name" Label="اسم الفرع" Required="true"  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="Color.Success"></MudTextField>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Class="custom-button">اضافة الفرع</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public Branch OriginalBranch { get; set; }

    public Branch Branch {get; set; }

    protected override void OnParametersSet()
    {
        if (OriginalBranch == null)
        {
            // No branch was passed, we are in add mode
            Branch = new Branch();

        }
        else
        {
            // A branch was passed, we are in edit mode
            // Create a copy of the branch to avoid modifying the original branch

            Branch = new Branch
            {
                Id = OriginalBranch.Id,
                Name = OriginalBranch.Name
                // Copy other properties as needed
            };


        }
    }

    void Submit()
    {
        if (!string.IsNullOrWhiteSpace(Branch.Name))
        {
            if (Branch.Id == 0)
            {
                // The branch has no ID, so it's a new branch

                // _IUnitOfWork.Branches.AddOneAsync(Branch);

                Http.PostAsJsonAsync("https://localhost:7210/api/Branches/AddOneAsync", Branch);

                // Show a success message
                _Snackbar.Add("Branch added successfully!", Severity.Success);
            }

            else
            {
                // The branch has an ID, so it's an existing branch
                // Detach the original branch
                // _IUnitOfWork.Detach(OriginalBranch);

                // Update the copy
                // _IUnitOfWork.Branches.Update(Branch);

                Http.PutAsJsonAsync("https://localhost:7210/api/Branches", Branch);
                _Snackbar.Add("Branch updated successfully!", Severity.Success);
            }
            
            // _IUnitOfWork.Complete();
            MudDialog.Close(DialogResult.Ok(true));


            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }

    void Cancel() => MudDialog.Cancel();

    // protected override async Task OnInitializedAsync()   no need
    // {
    //     Branch = new Branch();
    // }
}








@* <style>
.custom-modal {
    display: block;
    position: absolute;
    left: 60%;
    height: 50%;
    width: 28%;
    overflow-y:auto;
    overflow-x:auto;
    border-radius: 0px;
}

.custom-form {
    /* Add your form styles here */
}

.custom-button {
    /* Add your button styles here */
}
</style> *@