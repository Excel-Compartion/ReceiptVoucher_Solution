@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http


<MudDialog Class="custom-modal" Style="width: 100vw; height: auto">
    <DialogContent>
        <EditForm Model="@Branch" OnValidSubmit="Submit" Class="custom-form" >
            <DataAnnotationsValidator />

            <MudTextField  Label="اسم المركز" For="@(()=>Branch.Name)" @bind-Value="@Branch.Name"  AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudTextField  Label="المنطقة" For="@(()=>Branch.Area)" @bind-Value="@Branch.Area" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>
         
            <MudTextField Label="الشخص المسؤول" For="@(()=>Branch.ResponsiblePerson)" @bind-Value="@Branch.ResponsiblePerson" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudTextField Label="رقم الجوال" For="@(()=>Branch.Mobile)" @bind-Value="@Branch.Mobile" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

            <MudTextField Label="البريد الالكتروني" For="@(()=>Branch.Email)" @bind-Value="@Branch.Email" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Success"></MudTextField>

           

            <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="custom-button">@BtnName</MudButton>
            
             </EditForm>
    </DialogContent>
  
</MudDialog>




    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public Branch OriginalBranch { get; set; }


    [Parameter]
    public string BtnName { get; set; }

    string Icon = string.Empty;


    public Branch Branch {get; set; }

  

    protected override void OnParametersSet()
    {
        if (OriginalBranch == null)
        {
            Branch = new Branch();

        }
        else
        {

            Branch = new Branch
            {
                    Id = OriginalBranch.Id,
                    Name = OriginalBranch.Name,
                    Area = OriginalBranch.Area,
                    ResponsiblePerson = OriginalBranch.ResponsiblePerson,
                    Mobile = OriginalBranch.Mobile,
                    Email = OriginalBranch.Email
                
                
            };


        }
    }

    async void Submit()
    {
        if (!string.IsNullOrWhiteSpace(Branch.Name))
        {
            if (Branch.Id == 0)
            {
                // The branch has no ID, so it's a new branch

                await Http.PostAsJsonAsync("api/Branches/AddOneAsync", Branch);

                // Show a success message
                _Snackbar.Add("Branch added successfully!", Severity.Success);
            }

            else
            {

                await Http.PutAsJsonAsync("api/Branches", Branch);
                _Snackbar.Add("Branch updated successfully!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));

            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }


    void Cancel() => MudDialog.Cancel();

    
}




