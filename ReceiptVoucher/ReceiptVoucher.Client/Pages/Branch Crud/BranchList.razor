@page "/Branches"

@rendermode InteractiveAuto

@using ReceiptVoucher.Client.Services

@inject HttpClient Http
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar
@inject NavigationManager NavigationManager
@inject IAuthService _IAuthService

<PageTitle>Makarim</PageTitle>


<style>
    :root {
        --color-custom: #3090C7;
    }

</style>

<br />



<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.Apartment" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        المراكز الاعلامية



    </span>

</p>




<MudTable Style="width:100%;height:auto;" ServerData="@(new Func<TableState, Task<TableData<Branch>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>



        <MudButton Class="custom-btn" OnClick="OpenAddDialog" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Add" Title="add" />
            <span>إضافة</span>
        </MudButton>


        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="عن ماذا تبحث؟" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 search"></MudTextField>

    </ToolBarContent>
    <HeaderContent>

        <MudTh><MudTableSortLabel SortLabel="name_field" T="Branch">اسم المركز</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="area_field" T="Branch">المنطقة</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="responsiblePerson_field" T="Branch">الشخص المسؤول</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="mobile_field" T="Branch">رقم الجوال</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email_field" T="Branch">البريد الالكتروني</MudTableSortLabel></MudTh>


        <MudTh><MudTableSortLabel T="Branch">الاجراءت</MudTableSortLabel></MudTh>


    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="اسم المركز">@context.Name</MudTd>
            <MudTd DataLabel="المنطقة">@context.Area</MudTd>
            <MudTd DataLabel="الشخص المسؤول">@context.ResponsiblePerson</MudTd>
            <MudTd DataLabel="الجوال">@context.Mobile</MudTd>
            <MudTd DataLabel="الجيميل">@context.Email</MudTd>
            <MudTd DataLabel="الاجراءت">
                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Info" Variant="Variant.Outlined" @onclick="@(() => OpenEditDialog(context))" StartIcon="@Icons.Material.Outlined.Edit">تعديل</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="@(() => DeleteBranch(context.Id))" StartIcon="@Icons.Material.Outlined.DeleteOutline">حدف</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText class="NotFound">@ResponseMessage</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText class="LodingNow">جاري التحميل...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>




    @code {
    public IEnumerable<Branch>? pagedData;
    private MudTable<Branch>? table;

    private int totalItems;
    private string? searchString ;

    public string ResponseMessage = "لم يتم العثور على سجلات";

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<Branch> data = new List<Branch>();

    private async Task<TableData<Branch>> ServerReload(TableState state)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Branch>>("api/Branches/GetAllAsync");

            if (response!=null)
            {
                data = response;
            }


        }
        catch { ResponseMessage = "حدث خطاء اثناء تحميل البيانات"; }


        

        data = data.Where(branch =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (branch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{branch.Id}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {

            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;

            case "area_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Area);
                break;

            case "responsiblePerson_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ResponsiblePerson);
                break;

            case "mobile_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Mobile);
                break;

            case "email_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;


        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Branch>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        if (table != null) { table.ReloadServerData(); }
       
    }
}



    @code {

    protected override async Task OnInitializedAsync()
    {

        await _IAuthService.CheckIfNotAdminRedirectToLoginAsync();
    }


    //<!--==================     Add / Edit Dialog      =========================================-->

    private void OpenAddDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        parameters.Add("BtnName", "اضافه");

        _DialogService.Show<_Branch_Add_Dialog>("اضافة مركز جديد", parameters);
    }

    private void OpenEditDialog(Branch branch)
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
        parameters.Add("OriginalBranch", branch);
        parameters.Add("BtnName", "تعديل");

        _DialogService.Show<_Branch_Add_Dialog>("تعديل المركز", parameters);
    }

    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            // Reload the table data
            if (table != null)
            {
                await table.ReloadServerData();
            }
            
        }
    }




    private async Task DeleteBranch(int branchId)
    {
        Branch? selectedBranch = data.SingleOrDefault(b => b.Id == branchId);

        if (selectedBranch != null)
        {
            var parameters = new DialogParameters() { { "BranchName", selectedBranch.Name } };
            var dialog = _DialogService.Show<_ConfirmDeleteDialog>("الرجاء التأكيد", parameters);

            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch using the API controller
                var response = await Http.DeleteAsync($"api/Branches/{branchId}");

                if (response.IsSuccessStatusCode)
                {
                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات المركز بنجاح", Severity.Success);

                    // Reload the table data
                    if (table != null)
                    {
                        await table.ReloadServerData();
                    }
                    
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("فشل حذف بيانات المركز!", Severity.Error);
                }

                StateHasChanged();
            }
        }
    }



}


