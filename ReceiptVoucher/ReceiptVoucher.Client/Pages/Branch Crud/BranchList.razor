@page "/Branches"
@rendermode InteractiveAuto

@inject HttpClient Http

@inject IDialogService _DialogService 
@inject ISnackbar _Snackbar




<style>
    :root {
        --color-custom: #3090C7;
        
    }




 
</style>

<br />



<!--اسم الصفحه-->
<p style=" margin-bottom:2% ;">


    <span style="background-color:#DBE9FA ;font-size:x-large;color:#52595D">

        <MudIcon Icon="@Icons.Material.Filled.Apartment" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        المراكز الاعلامية

        <b style="color:dodgerblue;font-size:xx-large">|</b>


    </span>

</p>



@* <br />
<h5 style="margin-right:2%; margin-bottom:1%;" >المراكز الاعلامية</h5> *@



<MudTable Style="width:100%;height:auto;" ServerData="@(new Func<TableState, Task<TableData<Branch>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>


        <MudFab Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog" Variant="Variant.Outlined" Style="background-color: var(--color-custom); color: white;" Label="اضافة مركز" />


      
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>

        <MudTh><MudTableSortLabel SortLabel="name_field" T="Branch">اسم المركز</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="area_field" T="Branch">المنطقة</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="responsiblePerson_field" T="Branch">الشخص المسؤول</MudTableSortLabel></MudTh>

        <MudTh><MudTableSortLabel SortLabel="mobile_field" T="Branch">رقم الجوال</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email_field" T="Branch">البريد الالكتروني</MudTableSortLabel></MudTh>

        
        <MudTh><MudTableSortLabel  T="Branch">الاجراءت</MudTableSortLabel></MudTh>
        
       
    </HeaderContent>
    <RowTemplate>
        
        <MudTd DataLabel="اسم المركز">@context.Name</MudTd>
            <MudTd DataLabel="المنطقة">@context.Area</MudTd>
            <MudTd DataLabel="الشخص المسؤول">@context.ResponsiblePerson</MudTd>
            <MudTd DataLabel="الجوال">@context.Mobile</MudTd>
            <MudTd DataLabel="الجيميل">@context.Email</MudTd>
            <MudTd DataLabel="الاجراءت">
                <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Info" Variant="Variant.Outlined" @onclick="@(() => OpenEditDialog(context))" StartIcon="@Icons.Material.Outlined.Edit">تعديل</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="@(() => DeleteBranch(context.Id))" StartIcon="@Icons.Material.Outlined.DeleteOutline">حدف</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




    @code {
    public IEnumerable<Branch> pagedData;
    private MudTable<Branch> table;

    private int totalItems;
    private string searchString = null;


    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>

    public IEnumerable<Branch> data = new List<Branch>();

    private async Task<TableData<Branch>> ServerReload(TableState state)
    {
        data = await Http.GetFromJsonAsync<List<Branch>>("https://localhost:7210/api/Branches/GetAllAsync");
       
        data = data.Where(branch =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (branch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{branch.Id}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
          
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;

            case "area_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Area);
                break;

            case "responsiblePerson_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ResponsiblePerson);
                break;

            case "mobile_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Mobile);
                break;

            case "email_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;

           
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Branch>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}



    @code {



    //<!--==================     Add / Edit Dialog      =========================================-->

    private void OpenAddDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));

        parameters.Add("BtnName", "اضافه");

        _DialogService.Show<_Branch_Add_Dialog>("اضافة فرع جديد", parameters);
    }

    private void OpenEditDialog(Branch branch)
    {
        var parameters = new DialogParameters();
        parameters.Add("OnClose", EventCallback.Factory.Create<bool>(this, RefreshData));
        parameters.Add("OriginalBranch", branch);
        parameters.Add("BtnName", "تعديل");

        _DialogService.Show<_Branch_Add_Dialog>("تعديل الفرع", parameters);
    }

    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            // Reload the table data
            table.ReloadServerData();
        }
    }




    private async Task DeleteBranch(int branchId)
    {
        Branch? selectedBranch = data.SingleOrDefault(b => b.Id == branchId);

        if (selectedBranch != null)
        {
            var parameters = new DialogParameters() { { "BranchName", selectedBranch.Name } };
            var dialog = _DialogService.Show<_ConfirmDeleteDialog>("الرجاء التأكيد", parameters);

            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch using the API controller
                var response = await Http.DeleteAsync($"https://localhost:7210/api/Branches/{branchId}");

                if (response.IsSuccessStatusCode)
                {
                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات الفرع بنجاح", Severity.Success);

                    // Reload the table data
                    table.ReloadServerData();
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("حدث خطاء اثناء حذف بيانات الفرع!", Severity.Error);
                }

                StateHasChanged();
            }
        }
    }



}


