@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http


<MudDialog Class="custom-modal" Style="width: 100vw; height: auto">
    <DialogContent>
        <EditForm Model="@Project" OnValidSubmit="Submit" Class="custom-form">
            <DataAnnotationsValidator />

            <MudTextField Immediate="true" For="@(()=>Project.Name)" @bind-Value="@Project.Name" Adornment="Adornment.End"  AdornmentColor="Color.Success" Label="اسم المشروع الرئيسي"></MudTextField>


            <br />
            <MudTextField T="string" Label="الوصف" Variant="Variant.Text" For="@(()=>Project.Note)" @bind-Value="@Project.Note" Lines="3" />


            <br />
            <MudCheckBox Label="حاله التفعيل" @bind-Value="@Project.IsActive" Dense="true" Color="Color.Success" style='font-family: "Tajawal", sans-serif;'></MudCheckBox>

            <br />

            @if (BtnName != ButtonTypes.Details)
            {
                <div class="mt-5 mb-2 d-flex" style="gap: 10px;">
                                    <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mud-button-root mud-button mud-button-outlined mud-button-outlined-info mud-button-outlined-size-medium mud-ripple " style='font-size: 13px;
    font-family: "Tajawal", sans-serif;
    font-weight: 700;
    padding: 5px 0px;'>@BtnName</MudButton>
                <MudButton OnClick="Cancel" Class="mud-button-root mud-button mud-button-outlined mud-button-outlined-error mud-button-outlined-size-medium mud-ripple" style='font-size: 13px;
    font-family: "Tajawal", sans-serif;
    font-weight: 700;
    padding: 5px 0px;'>الغاء</MudButton>
                </div>

            }


            
             </EditForm>
    </DialogContent>
 
</MudDialog>




    @code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose {get; set; }

    [Parameter]
    public Project OriginalProject { get; set; }


    [Parameter]
    public string BtnName { get; set; }

 


  public Project Project {get; set; }

  

    protected override void OnParametersSet()
    {
        if (OriginalProject == null)
        {
            Project = new Project();

        }
        else
        {

            Project = new Project
            {
                    Id = OriginalProject.Id,
                    Name = OriginalProject.Name,
                    Note = OriginalProject.Note,
                    IsActive = OriginalProject.IsActive
                
            };


        }
    }

    async void Submit()
    {
        if (!string.IsNullOrWhiteSpace(Project.Name))
        {
            if (Project.Id == 0)
            {
                // The branch has no ID, so it's a new branch

             


                var response = await Http.PostAsJsonAsync("api/Projects/AddOneAsync", Project);
                if (response.IsSuccessStatusCode)
                {
                    _Snackbar.Add("Project add successfully!", Severity.Success);
                }
                else
                {
                    _Snackbar.Add($"Failed to add project. Error: {response.StatusCode}", Severity.Error);
                }

               
            }

            else
            {

                var response = await Http.PutAsJsonAsync("api/Projects", Project);
                if (response.IsSuccessStatusCode)
                {
                    _Snackbar.Add("project updated successfully!", Severity.Success);
                }
                else
                {
                    _Snackbar.Add($"Failed to update project. Error: {response.StatusCode}", Severity.Error);
                }

            }

            MudDialog.Close(DialogResult.Ok(true));

            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }


    void Cancel() => MudDialog.Cancel();

    
}




