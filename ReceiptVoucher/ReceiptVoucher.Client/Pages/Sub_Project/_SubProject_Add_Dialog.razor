@inject ISnackbar _Snackbar
@rendermode InteractiveAuto
@inject HttpClient Http

<MudDialog Class="custom-modal" Style="width: 100vw; height: auto">
    <DialogContent>
        <EditForm Model="@SubProject" OnValidSubmit="Submit" Class="custom-form">
            <DataAnnotationsValidator />

            <MudTextField Label="الاسم" Immediate="true" @bind-Value="@SubProject.Name" Adornment="Adornment.End" AdornmentIcon="@((BtnName == "اضافه") ? Icons.Material.Filled.Add : Icons.Material.Filled.Edit)" For="@(()=>SubProject.Name)" AdornmentColor="Color.Success"></MudTextField>
            <MudTextField Label="المدة" Immediate="true" @bind-Value="@SubProject.Duration" Adornment="Adornment.End" AdornmentIcon="@((BtnName == "اضافه") ? Icons.Material.Filled.Add : Icons.Material.Filled.Edit)" For="@(()=>SubProject.Duration)" AdornmentColor="Color.Success"></MudTextField>

            <MudSelect Label="المشروع" @bind-Value="@SubProject.ProjectId" For="@(()=>SubProject.ProjectId)">
                <MudSelectItem Value="0">---  اختيار اسم المشروع ---</MudSelectItem>
                @foreach (var project in Projects)
                {
                    <MudSelectItem Value="@project.Id">@project.Name</MudSelectItem>
                }
            </MudSelect>

            <MudButton OnClick="Cancel" Class="custom-button">الغاء</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Class="custom-button">@BtnName</MudButton>

        </EditForm>
    </DialogContent>
  
    </MudDialog>

    @code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public SubProject OriginalSubProject { get; set; }
    [Parameter] public string BtnName { get; set; }
    public SubProject SubProject { get; set; }

    [Parameter] 
    public List<Project> Projects { get; set; }





    protected override void OnParametersSet()
    {
        if (OriginalSubProject == null)
        {
            SubProject = new SubProject();



            // // Set the default value for ProjectId
            // if (Projects != null && Projects.Count > 0)
            // {
            //     SubProject.ProjectId = Projects[0].Id;
            // }


        }
        else
        {
            SubProject = new SubProject
                {
                    Id = OriginalSubProject.Id,
                    Name = OriginalSubProject.Name,
                    ProjectId = OriginalSubProject.ProjectId, // Add this line
                    Duration = OriginalSubProject.Duration,
                    CreatedDate = OriginalSubProject.CreatedDate,
                    IsActive = OriginalSubProject.IsActive

                };
        }
    }


    async void Submit()
    {
        if (!string.IsNullOrWhiteSpace(SubProject.Name))
        {
            if (SubProject.Id == 0)
            {

                // The SubProject has no ID, so it's a new SubProject
                var message= await Http.PostAsJsonAsync("https://localhost:7210/api/SubProjects/AddOneAsync", SubProject);
                // Show a success message
                _Snackbar.Add($"SubProject {message} added successfully!", Severity.Success);
            }
            else
            {
                await Http.PutAsJsonAsync("https://localhost:7210/api/SubProjects", SubProject);
                _Snackbar.Add("SubProject updated successfully!", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(true));
            // Trigger the OnClose event
            OnClose.InvokeAsync(true);
        }
    }

    void Cancel() => MudDialog.Cancel();
}
