<h3>UserProfile</h3>
@rendermode @(new InteractiveServerRenderMode(false) )

@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false) ) *@


@page "/UserProfile"
@using ReceiptVoucher.Core.Models.Dtos.Auth
@using System.Security.Claims
@attribute [Authorize]

@inject ReceiptVoucher.Client.Services.IAuthService _IAuthService
@inject AuthenticationStateProvider _AuthenticationStateProvider


<AuthorizeView>
    <h3>Hi You Logged with  <i>@context.User.Identity.Name</i> .</h3>
    <h3>Hi   <i>@userName</i> .</h3>
</AuthorizeView>

<h5>Change Password</h5>

<EditForm Model="request" OnValidSubmit="ChangePassword">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="currentPassword">Current Password</label>
        <InputText id="currentPassword" @bind-Value="request.CurrentPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => request.CurrentPassword)" />
    </div> 
    <div class="mb-3">
        <label for="newPassword">New Password</label>
        <InputText id="newPassword" @bind-Value="request.NewPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => request.NewPassword)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm New Password</label>
        <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => request.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Apply</button>
</EditForm>
@message


@code {
    UserChangePassword request = new();

    string message = string.Empty;

    private string userName;


    private async Task ChangePassword()
    {
        var result = await _IAuthService.ChangePassword(request);
        message = result.Message;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.FindFirstValue("Email"); // or "UserName"
    }

  
}
