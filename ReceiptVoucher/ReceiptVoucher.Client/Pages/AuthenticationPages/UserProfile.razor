@rendermode @(new InteractiveServerRenderMode(false) )

@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false) ) *@


@page "/UserProfile"
@using ReceiptVoucher.Core.Models.Dtos.Auth
@using System.Security.Claims
@* @attribute [Authorize] *@

@inject ReceiptVoucher.Client.Services.IAuthService _IAuthService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient _Http


<p style=" margin-bottom:2% ;">


    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.FileCopy" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        الصفحة الشخصية



    </span>

</p>



<div class="profileContainer">
    <img src="Images\avatar.webp" alt="Avatar" />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <h4 class="">الاسم: <span>@UserViewModel.FirstName @UserViewModel.LastName</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">المكتب: <span>@(UserViewModel.BranchName ?? "لم يتم تحديد المكتب")</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">رقم الجوال: <span>@(UserViewModel.Mobile ?? "لم يتم تحديد رقم الهاتف")</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">الصلاحيه: <span>@string.Join("," , UserViewModel.Roles ?? Enumerable.Empty<string>())</span></h4>
        </MudItem>

        @if (UserViewModel.BranchId is not null)
        {
            <MudItem xs="12" sm="6">
                <h4 class=""> رقم نقطة البيع : <span>@(UserViewModel.BranchAccountNumber)</span></h4>
            </MudItem>

        }

        <MudItem xs="12" Class="text-center">
            <h4 class="">البريد الإلكتروني: <span>@UserViewModel.Email</span></h4>
        </MudItem>
        <MudItem xs="12">
            <MudButton Class="custom-btn mx-auto" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleContainerPass">
                <MudIcon Icon="@Icons.Material.Filled.VpnKey" Title="add" />
                <span>تغيير كلمة المرور</span>
            </MudButton>
        </MudItem>
    </MudGrid>
</div>





<div class="continerPass" style="display: @(showContainerPass ? "block" : "none")">
    <h5>تغيير كلمة المرور</h5>
    <EditForm Model="request" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid>
            <MudItem xs="12">
                <label for="currentPassword">كلمة المرور الحالية</label>
                <InputText id="currentPassword" @bind-Value="request.CurrentPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.CurrentPassword)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <label for="newPassword">كلمة المرور الجديدة</label>
                <InputText id="newPassword" @bind-Value="request.NewPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.NewPassword)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <label for="confirmPassword">تأكيد كلمة المرور </label>
                <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => request.ConfirmPassword)" />
            </MudItem>
            <MudItem xs="12">
                <button type="submit" class="btn btn-primary">تغيير كلمة المرور</button>
            </MudItem>
        </MudGrid>
    </EditForm>
    <p>@message</p>
</div>


@code {
    public UserViewModel UserViewModel { get; set; } = new();

    UserChangePassword request = new();

    string message = string.Empty;

    private string userRole = string.Empty;


    private async Task ChangePassword()
    {
        var result = await _IAuthService.ChangePassword(request);
        message = result.Message;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserViewModel = await _IAuthService.GetCurrentUserDetailsFromApiAsync() ;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        // ----------------
        // try
        // {
        //     var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        //     var user = authState?.User;

        //     if (user != null)
        //     {
        //         var userId = user.FindFirstValue("uid");

        //         var roleClaim = user.FindFirst("roles");
        //         if (roleClaim != null)
        //         {
        //             userRole = roleClaim.Value;
        //         }

        //         var UserResponse = await _Http.GetFromJsonAsync<BaseResponse<UserViewModel>>($"api/users/GetUserDetails/{userId}");

        //         if (UserResponse != null && UserResponse.Success && UserResponse.Data != null)
        //         {
        //             UserViewModel = UserResponse.Data;
        //         }

        //     }
        // }
        // catch (Exception ex)
        // {
            
        //     Console.WriteLine(ex.Message);
        // }
       

    }


    bool showContainerPass = false;

    private void ToggleContainerPass()
    {
        showContainerPass = !showContainerPass;
    }
}
