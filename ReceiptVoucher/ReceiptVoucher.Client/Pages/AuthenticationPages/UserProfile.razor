
@rendermode @(new InteractiveServerRenderMode(false) )

@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false) ) *@


@page "/UserProfile"
@using ReceiptVoucher.Core.Models.Dtos.Auth
@using System.Security.Claims
@* @attribute [Authorize] *@

@inject ReceiptVoucher.Client.Services.IAuthService _IAuthService
@inject UserManager<ApplicationUser> _UserManager
@inject AuthenticationStateProvider _AuthenticationStateProvider


<p style=" margin-bottom:2% ;">


    <b style="color:dodgerblue;font-size:xx-large">|</b>
    <span class="mainTitle">

        <MudIcon Icon="@Icons.Material.Filled.FileCopy" Size="Size.Large" Style="color:#566D7E ;margin-bottom:2px" />

        الصفحة الشخصية



    </span>

</p>



<div class="profileContainer">
    <img src="Images\avatar.webp" alt="Avatar"/>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <h4 class="">الاسم: <span>@ApplicationUser.FirstName @ApplicationUser.LastName</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">المركز: <span>@(ApplicationUser?.Branch?.Name ?? "لم يتم تحديد المركز")</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">رقم الجوال: <span>@(ApplicationUser?.PhoneNumber ?? "لم يتم تحديد رقم الهاتف")</span></h4>
        </MudItem>
        <MudItem xs="12" sm="6">
            <h4 class="">نوع الحساب: <span>@userRole</span></h4>
        </MudItem>
        <MudItem xs="12" Class="text-center">
            <h4 class="">البريد الإلكتروني: <span>@ApplicationUser.Email</span></h4>
        </MudItem>
        <MudItem xs="12">
            <MudButton Class="custom-btn mx-auto" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleContainerPass">
                <MudIcon Icon="@Icons.Material.Filled.VpnKey" Title="add" />
                <span>تغيير كلمة المرور</span>
            </MudButton>
        </MudItem>
    </MudGrid>
</div>





<div class="continerPass" style="display: @(showContainerPass ? "block" : "none")">
    <h5>تغيير كلمة المرور</h5>
    <EditForm Model="request" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid>
            <MudItem xs="12" >
            <label for="currentPassword">كلمة المرور الحالية</label>
            <InputText id="currentPassword" @bind-Value="request.CurrentPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => request.CurrentPassword)" />
        </MudItem>
            <MudItem xs="12" sm="6">
            <label for="newPassword">كلمة المرور الجديدة</label>
            <InputText id="newPassword" @bind-Value="request.NewPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => request.NewPassword)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <label for="confirmPassword">تأكيد كلمة المرور </label>
            <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => request.ConfirmPassword)" />
        </MudItem>
            <MudItem xs="12">
        <button type="submit" class="btn btn-primary">تغيير كلمة المرور</button>
        </MudItem>
        </MudGrid>
    </EditForm>
    <p>@message</p>
</div>


@code {
    public ApplicationUser ApplicationUser { get; set; } = new();

    UserChangePassword request = new();

    string message = string.Empty;

    private string userRole = string.Empty;


    private async Task ChangePassword()
    {
        var result = await _IAuthService.ChangePassword(request);
        message = result.Message;
    }

    protected override async Task OnInitializedAsync()
    {

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user != null)
        {
            var userId = user.FindFirstValue("uid");

            var roleClaim = user.FindFirst("roles");
            if (roleClaim != null)
            {
                userRole = roleClaim.Value;
            }

            ApplicationUser = await _UserManager.Users.Include(user => user.Branch).SingleOrDefaultAsync(u => u.Id == userId);

        }

    }


    bool showContainerPass = false;

    private void ToggleContainerPass()
    {
        showContainerPass = !showContainerPass;
    }
  
}
