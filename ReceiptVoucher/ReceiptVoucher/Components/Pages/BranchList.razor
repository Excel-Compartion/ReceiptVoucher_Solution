@page "/Branches"
@attribute [StreamRendering(true)]

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IUnitOfWork _IUnitOfWork
@inject NavigationManager _NavigationManager
@inject IDialogService _DialogService
@inject ISnackbar _Snackbar



<MudTable Items="@Branches" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Branch,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Branches</MudText>
        <MudSpacer />
        <MudButton OnClick="OpenDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success">اضافة فرع</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions" >
                @* <NavLink href="@($"branch/edit/{context.Id}")" class="btn-primary btn">Edit</NavLink> *@
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="@(() => DeleteBranch(context.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.Name</MudText>
        </div>
    </div>

    @code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Branch selectedItem1 = null;
    private HashSet<Branch> selectedItems = new HashSet<Branch>();

    public List<Branch?> Branches = null;

    protected override async Task OnInitializedAsync()
    {
        Branches = await _IUnitOfWork.Branches.GetAllAsync();
    }

    private bool FilterFunc1(Branch branch) => FilterFunc(branch, searchString1);

    private bool FilterFunc(Branch branch, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (branch.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenDialog()
    {    
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialogParameters = new DialogParameters { { "OnClose", EventCallback.Factory.Create<bool>(this, RefreshData) } };

        _DialogService.Show<_Branch_Add_Dialog>("اضافة فرع جديد", dialogParameters , closeOnEscapeKey);
    }

    private async void RefreshData(bool dialogResult)
    {
        if (dialogResult)
        {
            Branches = await _IUnitOfWork.Branches.GetAllAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteBranch(int branchId)
    {
        Branch? selectedBranch = Branches.SingleOrDefault(b => b.Id == branchId);

        if (selectedBranch != null)
        {
            var parameters = new DialogParameters() { { "BranchName", selectedBranch.Name } };
            var dialog = _DialogService.Show<_ConfirmDeleteDialog>("الرجاء التأكيد" ,  parameters );
            
            var result = await dialog.Result;

            if (!result.Cancelled && result.Data is bool data && data)
            {
                // User confirmed deletion, proceed with deletion

                // Try to delete the branch

                bool deleteResult = await _IUnitOfWork.Branches.DeleteAsync(branchId);

                if (deleteResult)
                {
                    // Deletion was successful
                    Branches.Remove(selectedBranch);

                    // Show a success message
                    _Snackbar.Add("تم حذف بيانات الفرع بنجاح", Severity.Success);
                }
                else
                {
                    // Deletion failed
                    _Snackbar.Add("حدث خطاء اثناء حذف بيانات الفرع!", Severity.Error);
                }
               
                StateHasChanged();
            }
        }
        
    } 

   

}


<!--============================================================-->
